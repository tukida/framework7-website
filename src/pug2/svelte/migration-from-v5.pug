extends ../_docs-template

block vars
  - var activeLink = 'svelte';
  - var title = 'Migration from Framework7 v5 | Framework7 Svelte Documentation';

block content

  .docs-nav
    include ../_docs-menu-svelte
  .docs-content
    +improveDocsLink
    h1 Migration from Framework7 v5
    ul.docs-index
    p In this article we will walk through most of the breaking changes to check what needs to be done to migrate your app from Framework7 v5 to Framework7 v6.
    h2 Framework7 Core
    p First of all, let's check what has been changed in core version.

    h3 Package
    p Core version has <a href="../docs/package.html">new package structure</a>, and you may need to tweak your imports for `lite` and `bundle` versions:
    ul
      li `framework7/framework7.esm.js` is now `framework7`
      li `framework7/framework7.esm.bundle.js` is now `framework7/bundle`
      li `framework7/framework7-lite.esm.js` is now `framework7/lite`
      li `framework7/framework7-lite.esm.bundle.js` is now `framework7/lite-bundle`
    p So if you have something like this in v5:
    ```js
      import Framework7 from 'framework7/framework7-lite.esm.bundle.js'
    ```
    p it should be changed to:
    ```js
      import Framework7 from 'framework7/lite-bundle'
    ```

    h3 Dom7
    p Framework7 v6 uses new Dom7 v3. It has breaking changes for all "iteration" methods like `.each()` and `.map()`. Specifically, order of arguments has been swapped to match native JavaScript array iterators:
    ```js
      // in v5 (Dom7 v2)
      $('p').each((index, el) => {
        // ...
      })

      // in v6 (Dom7 v3) - arguments are swapped, element is now always the first argument
      $('p').each((el, index) => {
        // ...
      })
    ```

    h3 Template7
    p Template7 template library has been completely removed from Framework7. If your app still needs it, just install it manually:
    ```
      npm i template7
    ```
    ```js
      import Template7 from 'template7';

      Template7.compile('...');
    ```

    h3 Request
    p Request library's import has been renamed from `Request` to `request`. Also now it uses Promises for all methods. Check updated <a href="../docs/request.html">Request documentation</a>.
    ```js
      // import renamed
      import { request } from 'framework7/lite';

      // not it always uses Promises
      request.get('some-url').then((res) => {
        console.log(res.data);
      });
    ```

    h3 Device & Support
    p Device & Support imports are also changed. Now only getters functions are available for imports.
    p In v5 we had:
    ```js
      import { Device, Support } from 'framework7';

      if (Device.android) {
        console.log('it is Android');
      }

      if (Support.touch) {
        console.log('touch is supported');
      }
    ```
    p In v6 we should use different approach:
    ```js
      import { getDevice, getSupport } from 'framework7';

      const device = getDevice();
      const support = getSupport();

      if (device.android) {
        console.log('it is Android');
      }

      if (support.touch) {
        console.log('touch is supported');
      }
    ```

    h3 Utils
    p Utils import has been renamed from `Utils` to `utils`:
    ```js
      // in v5
      import { Utils } from 'framework7';

      // in v6
      import { utils } from 'framework7';
    ```

    h3 View/Router
    p Route's `beforeEnter`, `beforeLeave`, `redirect` and `async` methods now receive a single object with following props:
    ul
      li `to`
      li `from`
      li `resolve`
      li `reject`
      li `direction` (new in v6 - can be `forward` or `backward`)
      li `router` (new in v6 - current router instance)
      li `app` (new in v6 - f7 app instance)
    p Check updated <a href="../docs/routes.html">Routes documentation</a> for more details and examples.

    h2 Framework7 Svelte

    h3 App Component
    p Main `<App>` component now receives all Framework7 parameters as separate props.
    ```html
      <!-- in v5 -->
      <App params={{ id: 'app-id', name: 'app-name' }}> ... </App>

      <!-- in v6 -->
      <App id="app-id" name="app-name"> ... </App>
    ```

    h3 App `data` & `methods`
    p App `data` and `methods` parameters for storing "global" app state are completely removed.
    p Now Framework7 comes with new Store library for managing app state. Check <a href="store.html">new Store documentation</a> and how to use in Framework7 Svelte.

    h3 View/Router
    p `pushState` parameters renamed to `browserHistory`:
    ```html
      <!-- in v5 -->
      <View pushState pushStateSeparator=""> ... </View>

      <!-- in v6 -->
      <View browserHistory browserHistorySeparator=""> ... </View>
    ```

    h3 Modals & Panel
    p All modals components (Popup, Popover, LoginScreen, Actions, Sheet) and Panel now don't have `.open()` and `.close()` methods. Their state should be controlled via boolean `opened` prop.

    h3 Swiper
    p Framework7 v6 uses all new Swiper v6 with its official Svelte components which has a bit different API, usage and some new features. For the full new API documentation and more examples check out the official <a href="https://swiperjs.com/svelte/" target="_blank">Swiper for Svelte documentation</a>.

    h3 Skeleton Elements
    p Skeleton Elements now also integrated as a standalone library. For the full API documentation and more examples check out the official <a href="https://skeleton-elements.dev/svelte/" target="_blank">Skeleton Elements for Svelte documentation</a>.


