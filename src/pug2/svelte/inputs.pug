extends ../_docs-template

block vars
  - var activeLink = 'svelte';
  - var title = 'Input Svelte Component | Framework7 Svelte Documentation';

block content
  include ../_docs-demo-device

  .docs-nav
    include ../_docs-menu-svelte
  .docs-content
    +improveDocsLink
    h1 Input / Form Elements Svelte Components
    ul.docs-index
    p Form elements allow you to create flexible and beautiful Form layout. Form elements are just well known <a href="../docs/list-view.html">List View</a> (<b><a href="list-view.html">List</a> and <a href="list-item.html">List Item</a> Svelte components</b>) but with few additional components.
    p Check out Framework7's <a href="../docs/inputs.html">Inputs / Form Elements</a> for their appearance.

    h2 Input Components
    p There are following components included:
    ul
      li `ListInput` - list item input element
      li `Input` - input element

    h2 Input Properties
    table.params-table
      thead
        tr
          th Prop
          th Type
          th Default
          th Description
      tbody
        tr
          th(colspan="4") &lt;ListInput&gt; properties
        tr
          td media
          td string
          td
          td List item media image URL
        tr
          td label
          td string
          td
          td Input's label text
        tr
          td inlineLabel
          td boolean
          td false
          td Makes label inline
        tr
          td floatingLabel
          td boolean
          td false
          td Enables floating label
        tr
          td outline
          td boolean
          td false
          td Makes input outline
        tr
          td input
          td boolean
          td true
          td Whether it should render input element or not. Disable if you want to use custom input inside.
        tr
          td type
          td string
          td
          td Input type. All default HTML5 input type, and few special ones:
            ul
              li <b>textarea</b> - to render textarea element
              li <b>select</b> - to render select element
              li <b>datepicker</b> - to open <a href="/docs/calendar.html" target="_blank">Calendar</a> on input focus
              li <b>colorpicker</b> - to open <a href="/docs/color-picker.html" target="_blank">Color Picker</a> on input focus
              li <b>texteditor</b> - to open <a href="/docs/text-editor.html" target="_blank">Text Editor</a> on input focus
        tr
          td resizable
          td boolean
          td false
          td Makes textarea resizable
        tr
          td inputStyle
          td object
          td
          td Value of input's "style" attribute, in case you need to pass extra styles
        tr
          td clearButton
          td boolean
          td false
          td Adds input clear button that will clear input value on click
        tr
          td validate
          td boolean
          td false
          td When enabled then input value will be validated on change based on passed "pattern" or based on input type. If you use custom validation and need more control on where to show/hide error message, then it is better to disable validation and use `error-message` together with `error-message-force` props.
        tr
          td validateOnBlur
          td boolean
          td false
          td When enabled then input will be validated on blur only.
        tr
          td onValidate
          td function
          td
          td Callback to be executed on input validation, returns boolean value indication whether the input is valid or not.
            ```svelte
              <ListInput
                type="email"
                validate
                onValidate={(isValid) => setInputValid(isValid)}
              />
            ```
        tr
          td errorMessage
          td string
          td
          td Custom error message to show when input value is invalid
        tr
          td errorMessageForce
          td boolean
          td false
          td Force error message to force. Useful in case you use custom validation and want to show/hide error message when you need it
        tr
          td info
          td string
          td
          td Custom additional text with information about input
        tr
          td name
          td string
          td
          td Input name
        tr
          td placeholder
          td string
          td
          td Input placeholder
        tr
          td id
          td string
          td
          td Wrapping element ID attribute
        tr
          td inputId
          td string
          td
          td Input element ID attribute
        tr
          td value
          td string<br>number
          td
          td
            p Input value.
            p If `type="datepicker"` then value must be passed as what <a href="/docs/calendar.html" target="_blank">Calendar</a> accepts - Array with dates, for example `value={[new Date()}"`
            p If `type="colorpicker"` then value must be passed as what <a href="/docs/color-picker.html" target="_blank">Color Picker</a> accepts - Object with colors, for example `value={{hex: '#ff0000'}}`
            p If `type="texteditor"` then value should be HTML string
        tr
          td inputmode
          td string
          td
          td Value of input's native "inputmode" attribute
        tr
          td size
          td string<br>number
          td
          td Value of input's native "size" attribute
        tr
          td pattern
          td string
          td
          td Value of input's native "pattern" attribute
        tr
          td accept
          td string<br>number
          td
          td Value of input's native "accept" attribute
        tr
          td autocomplete
          td string
          td
          td Value of input's native "autocomplete" attribute
        tr
          td autofocus
          td boolean
          td false
          td Value of input's native "autofocus" attribute
        tr
          td autosave
          td string
          td
          td Value of input's native "autosave" attribute
        tr
          td disabled
          td boolean
          td false
          td Marks input as disabled
        tr
          td max
          td string<br>number
          td
          td Value of input's native "max" attribute
        tr
          td min
          td string<br>number
          td
          td Value of input's native "min" attribute
        tr
          td step
          td string<br>number
          td
          td Value of input's native "step" attribute
        tr
          td maxlength
          td string<br>number
          td
          td Value of input's native "maxlength" attribute
        tr
          td minlength
          td string<br>number
          td
          td Value of input's native "minlength" attribute
        tr
          td multiple
          td boolean
          td false
          td Value of input's native "multiple" attribute
        tr
          td readonly
          td boolean
          td false
          td Marks input as readonly
        tr
          td required
          td boolean
          td false
          td Marks input as required
        tr
          td tabindex
          td string<br>number
          td
          td Value of input's native "tabindex" attribute
        tr
          td noStoreData
          td boolean
          td false
          td Allows to ignore input value to be stored when using with <a href="../docs/form.html#form-storage">Form Storage</a>
        tr
          td ignoreStoreData
          td boolean
          td false
          td Same as previous
        tr
          td wrap
          td boolean
          td true
          td When enabled it will be wrapped in `<li>` element
        tr
          td calendarParams
          td object
          td
          td Object with <a href="../docs/calendar.html#calendar-parameters" target="_blank">Calendar Parameters</a> which is used when `type="datepicker"`
        tr
          td colorPickerParams
          td object
          td
          td Object with <a href="../docs/color-picker.html#color-picker-parameters" target="_blank">Color Picker Parameters</a> which is used when `type="colorpicker"`
        tr
          td textEditorParams
          td object
          td
          td Object with <a href="../docs/text-editor.html#text-editor-parameters" target="_blank">Text Editor Parameters</a> which is used when `type="texteditor"`
        tr
          th(colspan="4") &lt;Input&gt; properties
        tr
          td outline
          td boolean
          td false
          td Makes input outline
        tr
          td wrap
          td boolean
          td true
          td Defines should the input be wraped with `<div class="input">` element or not.
        tr
          td type
          td string
          td
          td Input type. All default HTML5 input type, and few special ones:
            ul
              li <b>textarea</b> - to render textarea element
              li <b>select</b> - to render select element
              li <b>datepicker</b> - to open <a href="/docs/calendar.html" target="_blank">Calendar</a> on input focus
              li <b>colorpicker</b> - to open <a href="/docs/color-picker.html" target="_blank">Color Picker</a> on input focus
              li <b>texteditor</b> - to open <a href="/docs/text-editor.html" target="_blank">Text Editor</a> on input focus
        tr
          td resizable
          td boolean
          td false
          td Makes textarea resizable
        tr
          td inputStyle
          td object
          td
          td Value of input's "style" attribute, in case you need to pass extra styles
        tr
          td clearButton
          td boolean
          td false
          td Adds input clear button that will clear input value on click
        tr
          td validate
          td boolean
          td false
          td When enabled then input value will be validated on change based on passed "pattern" or based on input type. If you use custom validation and need more control on where to show/hide error message, then it is better to disable validation and use `error-message` together with `error-message-force` props.
        tr
          td validateOnBlur
          td boolean
          td false
          td When enabled then input will be validated on blur only.
        tr
          td onValidate
          td function
          td
          td Callback to be executed on input validation, returns boolean value indication whether the input is valid or not.
            ```svelte
              <Input
                type="email"
                validate
                onValidate={(isValid) => setInputValid(isValid)}
              />
            ```
        tr
          td errorMessage
          td string
          td
          td Custom error message to show when input value is invalid
        tr
          td errorMessageForce
          td boolean
          td false
          td Force error message to force. Useful in case you use custom validation and want to show/hide error message when you need it
        tr
          td info
          td string
          td
          td Custom additional text with information about input
        tr
          td name
          td string
          td
          td Input name
        tr
          td placeholder
          td string
          td
          td Input placeholder
        tr
          td id
          td string
          td
          td Wrapping element ID attribute
        tr
          td inputId
          td string
          td
          td Input element ID attribute
        tr
          td value
          td string<br>number
          td
          td
            p Input value.
            p If `type="datepicker"` then value must be passed as what <a href="/docs/calendar.html" target="_blank">Calendar</a> accepts - Array with dates, for example `value={[new Date()}"`
            p If `type="colorpicker"` then value must be passed as what <a href="/docs/color-picker.html" target="_blank">Color Picker</a> accepts - Object with colors, for example `value={{hex: '#ff0000'}}`
            p If `type="texteditor"` then value should be HTML string
        tr
          td inputmode
          td string
          td
          td Value of input's native "inputmode" attribute
        tr
          td size
          td string<br>number
          td
          td Value of input's native "size" attribute
        tr
          td pattern
          td string
          td
          td Value of input's native "pattern" attribute
        tr
          td accept
          td string<br>number
          td
          td Value of input's native "accept" attribute
        tr
          td autocomplete
          td string
          td
          td Value of input's native "autocomplete" attribute
        tr
          td autofocus
          td boolean
          td false
          td Value of input's native "autofocus" attribute
        tr
          td autosave
          td string
          td
          td Value of input's native "autosave" attribute
        tr
          td checked
          td boolean
          td false
          td Marks input as checked
        tr
          td disabled
          td boolean
          td false
          td Marks input as disabled
        tr
          td max
          td string<br>number
          td
          td Value of input's native "max" attribute
        tr
          td min
          td string<br>number
          td
          td Value of input's native "min" attribute
        tr
          td step
          td string<br>number
          td
          td Value of input's native "step" attribute
        tr
          td maxlength
          td string<br>number
          td
          td Value of input's native "maxlength" attribute
        tr
          td minlength
          td string<br>number
          td
          td Value of input's native "minlength" attribute
        tr
          td multiple
          td boolean
          td false
          td Value of input's native "multiple" attribute
        tr
          td readonly
          td boolean
          td false
          td Marks input as readonly
        tr
          td required
          td boolean
          td false
          td Marks input as required
        tr
          td tabindex
          td string<br>number
          td
          td Value of input's native "tabindex" attribute
        tr
          td noStoreData
          td boolean
          td false
          td Allows to ignore input value to be stored when using with <a href="../docs/form.html#form-storage">Form Storage</a>
        tr
          td ignoreStoreData
          td boolean
          td false
          td Same as previous
        tr
          td calendarParams
          td object
          td
          td Object with <a href="../docs/calendar.html#calendar-parameters" target="_blank">Calendar Parameters</a> which is used when `type="datepicker"`
        tr
          td colorPickerParams
          td object
          td
          td Object with <a href="../docs/color-picker.html#color-picker-parameters" target="_blank">Color Picker Parameters</a> which is used when `type="colorpicker"`
        tr
          td textEditorParams
          td object
          td
          td Object with <a href="../docs/text-editor.html#text-editor-parameters" target="_blank">Text Editor Parameters</a> which is used when `type="texteditor"`

    h2 Input Events
    table.events-table
      thead
        tr
          th Event
          th Arguments
          th Description
      tbody
        tr
          th(colspan="3") &lt;ListInput&gt;, &lt;Input&gt; events
        tr
          td focus
          td <span>(event)</span>
          td Fired when user focused to input.
        tr
          td blur
          td <span>(event)</span>
          td Fired when user lost focus from input.
        tr
          td input
          td <span>(event)</span>
          td Fired immediately when input value changed. Note: Input event triggers after beforeinput, keypress, keyup, keydown events.
        tr
          td change
          td <span>(event)</span>
          td Fired on blur if value changed.
        tr
          td inputClear
          td <span>(event)</span>
          td Fired when input clear button clicked
        tr
          td textareaResize
          td <span>(event)</span>
          td Fired if resizable textarea resized. `event.detail` will contain object with the `initialHeight`, `currentHeight` and `scrollHeight` properties
        tr
          td inputEmpty
          td <span>(event)</span>
          td Fired when input value becomes empty
        tr
          td inputNotempty
          td <span>(event)</span>
          td Fired when input value becomes not empty
        tr
          td calendarChange
          td <span>(value)</span>
          td Fired when `type="datepicker"` Calendar value changed. As an argument it receives array with selected dates.
        tr
          td colorPickerChange
          td <span>(value)</span>
          td Fired when `type="colorpicker"` Color Picker value changed. As an argument it receives object with Color Picker value.
        tr
          td textEditorChange
          td <span>(value)</span>
          td Fired when `type="texteditor"` Text Editor value changed. As an argument it receives Texteditor value (HTML string).

    h2 Input Slots
    p `<ListInput>` has additional slots for custom elements:
    ul
      li `default` - in case of `type="select"` or `type="textarea"` - element will be placed inside of `select` or `textarea` tags.
      li `info` - element will be inserted into container with info message
      li `error-message` - element will be inserted into container with error message
      li `label` - element will be inserted into container with input's label
      li `input` - element will be inserted instead of input element (`input` prop must be also set to `false`)

      li `root-start` - element will be inserted in the beginning of `<li>` element
      li `root` / `root-end` - element will be inserted in the end of `<li>` element
      li `content-start` - element will be inserted in the beginning of `<div class="item-content">` element
      li `content` / `content-end` - element will be inserted in the end of `<div class="item-content">` element
      li `inner-start` - element will be inserted in the beginning of `<div class="item-inner">` element
      li `inner` / `inner-end` - element will be inserted in the end of `<div class="item-inner">` element
      li `media` - element will be inserted inside of `<div class="item-media">` element

    .with-device
      h2(data-device-preview="../docs-demos/svelte/inputs.html") Examples
      h4 Full Layout / Inline Labels
      :code(lang="svelte")
        <List inlineLabels noHairlinesMd>
          <ListInput
            label="Name"
            type="text"
            placeholder="Your name"
            clearButton
          >
            <i class="icon demo-list-icon" slot="media"/>
          </ListInput>

          <ListInput
            label="Password"
            type="password"
            placeholder="Your password"
            clearButton
          >
            <i class="icon demo-list-icon" slot="media"/>
          </ListInput>

          <ListInput
            label="E-mail"
            type="email"
            placeholder="Your e-mail"
            clearButton
          >
            <i class="icon demo-list-icon" slot="media"/>
          </ListInput>

          <ListInput
            label="URL"
            type="url"
            placeholder="URL"
            clearButton
          >
            <i class="icon demo-list-icon" slot="media"/>
          </ListInput>

          <ListInput
            label="Phone"
            type="tel"
            placeholder="Your phone number"
            clearButton
          >
            <i class="icon demo-list-icon" slot="media"/>
          </ListInput>

          <ListInput
            label="Gender"
            type="select"
            value="Male"
            placeholder="Please choose..."
          >
            <i class="icon demo-list-icon" slot="media"/>
            <option value="Male">Male</option>
            <option value="Female">Female</option>
          </ListInput>

          <ListInput
            label="Birthday"
            type="date"
            value="2014-04-30"
            placeholder="Please choose..."
          >
            <i class="icon demo-list-icon" slot="media"/>
          </ListInput>

          <ListInput
            label="Date time"
            type="datetime-local"
            placeholder="Please choose..."
          >
            <i class="icon demo-list-icon" slot="media"/>
          </ListInput>

          <ListInput
            label="Range"
            input={false}
          >
            <i class="icon demo-list-icon" slot="media"/>
            <span slot="input">
              <Range value={50} min={0} max={100} step={1}/>
            </span>
          </ListInput>

          <ListInput
            label="Textarea"
            type="textarea"
            placeholder="Bio"
          >
            <i class="icon demo-list-icon" slot="media"/>
          </ListInput>

          <ListInput
            label="Resizable"
            type="textarea"
            resizable
            placeholder="Bio"
          >
            <i class="icon demo-list-icon" slot="media"/>
          </ListInput>
        </List>

      h4 Full Layout / Stacked Labels
      :code(lang="svelte")
        <List noHairlinesMd>
          <ListInput
            label="Name"
            type="text"
            placeholder="Your name"
            clearButton
          >
            <i class="icon demo-list-icon" slot="media"/>
          </ListInput>

          <ListInput
            label="Password"
            type="password"
            placeholder="Your password"
            clearButton
          >
            <i class="icon demo-list-icon" slot="media"/>
          </ListInput>

          <ListInput
            label="E-mail"
            type="email"
            placeholder="Your e-mail"
            clearButton
          >
            <i class="icon demo-list-icon" slot="media"/>
          </ListInput>

          <ListInput
            label="URL"
            type="url"
            placeholder="URL"
            clearButton
          >
            <i class="icon demo-list-icon" slot="media"/>
          </ListInput>

          <ListInput
            label="Phone"
            type="tel"
            placeholder="Your phone number"
            clearButton
          >
            <i class="icon demo-list-icon" slot="media"/>
          </ListInput>

          <ListInput
            label="Gender"
            type="select"
            value="Male"
            placeholder="Please choose..."
          >
            <i class="icon demo-list-icon" slot="media"/>
            <option value="Male">Male</option>
            <option value="Female">Female</option>
          </ListInput>

          <ListInput
            label="Birthday"
            type="date"
            value="2014-04-30"
            placeholder="Please choose..."
          >
            <i class="icon demo-list-icon" slot="media"/>
          </ListInput>

          <ListInput
            label="Date time"
            type="datetime-local"
            placeholder="Please choose..."
          >
            <i class="icon demo-list-icon" slot="media"/>
          </ListInput>

          <ListInput
            label="Range"
            input={false}
          >
            <i class="icon demo-list-icon" slot="media"/>
            <span slot="input">
              <Range value={50} min={0} max={100} step={1}/>
            </span>
          </ListInput>

          <ListInput
            label="Textarea"
            type="textarea"
            placeholder="Bio"
          >
            <i class="icon demo-list-icon" slot="media"/>
          </ListInput>

          <ListInput
            label="Resizable"
            type="textarea"
            resizable
            placeholder="Bio"
          >
            <i class="icon demo-list-icon" slot="media"/>
          </ListInput>
        </List>

      h4 Date Pickers
      :code(lang="svelte")
        <List noHairlinesMd>
          <ListInput
            label="Default setup"
            type="datepicker"
            placeholder="Your birth date"
            readonly
          ></ListInput>
          <ListInput
            label="Custom date format"
            type="datepicker"
            placeholder="Select date"
            readonly
            calendarParams={{dateFormat: 'DD, MM dd, yyyy'}}
          ></ListInput>
          <ListInput
            label="Multiple Values"
            type="datepicker"
            placeholder="Select multiple dates"
            readonly
            calendarParams={{ dateFormat: 'M dd yyyy', multiple: true }}
          ></ListInput>
          <ListInput
            label="Range Picker"
            type="datepicker"
            placeholder="Select date range"
            readonly
            calendarParams={{ dateFormat: 'M dd yyyy', rangePicker: true }}
          ></ListInput>
          <ListInput
            label="Open in Modal"
            type="datepicker"
            placeholder="Select date"
            readonly
            calendarParams={{openIn: 'customModal', header: true, footer: true, dateFormat: 'MM dd yyyy'}}
          ></ListInput>
        </List>

      h4 Color Pickers
      :code(lang="svelte")
        <List noHairlinesMd>
          <ListInput
            type="colorpicker"
            label="Color Wheel"
            placeholder="Color"
            readonly
            value={{ hex: '#00ff00' }}
          />
          <ListInput
            type="colorpicker"
            label="Saturation-Brightness Spectrum"
            placeholder="Color"
            readonly
            value={{ hex: '#ff0000' }}
            colorPickerParams={{
              modules: ['sb-spectrum', 'hue-slider'],
            }}
          />
          <ListInput
            type="colorpicker"
            label="RGB Sliders"
            placeholder="Color"
            readonly
            value={{ hex: '#0000ff' }}
            colorPickerParams={{
              modules: ['rgb-sliders'],
              sliderValue: true,
              sliderLabel: true,
            }}
          />
          <ListInput
            type="colorpicker"
            label="RGBA Sliders"
            placeholder="Color"
            readonly
            value={{ hex: '#ff00ff' }}
            colorPickerParams={{
              modules: ['rgb-sliders', 'alpha-slider'],
              sliderValue: true,
              sliderLabel: true,
              formatValue(value) {
                return `rgba(${value.rgba.join(', ')})`;
              },
            }}
          />
          <ListInput
            type="colorpicker"
            label="HSB Sliders"
            placeholder="Color"
            readonly
            value={{ hex: '#00ff00' }}
            colorPickerParams={{
              modules: ['hsb-sliders'],
              sliderValue: true,
              sliderLabel: true,
              formatValue(value) {
                return `hsb(${value.hsb[0]}, ${value.hsb[1] * 1000 / 10}%, ${value.hsb[2] * 1000 / 10}%)`
              },
            }}
          />
          <ListInput
            type="colorpicker"
            label="RGB Bars"
            placeholder="Color"
            readonly
            value={{ hex: '#0000ff' }}
            colorPickerParams={{
              modules: ['rgb-bars'],
              openIn: 'auto',
              barValue: true,
              barLabel: true,
              formatValue(value) {
                return `rgb(${value.rgb.join(', ')})`;
              },
            }}
          />
          <ListInput
            type="colorpicker"
            label="RGB Sliders + Colors"
            placeholder="Color"
            readonly
            value={{ hex: '#ffff00' }}
            colorPickerParams={{
              modules: ['initial-current-colors', 'rgb-sliders'],
              sliderValue: true,
              sliderLabel: true,
              formatValue(value) {
                return `rgb(${value.rgb.join(', ')})`;
              },
            }}
          />
          <ListInput
            type="colorpicker"
            label="Palette"
            placeholder="Color"
            readonly
            value={{ hex: '#FFEBEE' }}
            colorPickerParams={{
              modules: ['palette'],
              openIn: 'auto',
              openInPhone: 'sheet',
              palette: [
                ['#FFEBEE', '#FFCDD2', '#EF9A9A', '#E57373', '#EF5350', '#F44336', '#E53935', '#D32F2F', '#C62828', '#B71C1C'],
                ['#F3E5F5', '#E1BEE7', '#CE93D8', '#BA68C8', '#AB47BC', '#9C27B0', '#8E24AA', '#7B1FA2', '#6A1B9A', '#4A148C'],
                ['#E8EAF6', '#C5CAE9', '#9FA8DA', '#7986CB', '#5C6BC0', '#3F51B5', '#3949AB', '#303F9F', '#283593', '#1A237E'],
                ['#E1F5FE', '#B3E5FC', '#81D4FA', '#4FC3F7', '#29B6F6', '#03A9F4', '#039BE5', '#0288D1', '#0277BD', '#01579B'],
                ['#E0F2F1', '#B2DFDB', '#80CBC4', '#4DB6AC', '#26A69A', '#009688', '#00897B', '#00796B', '#00695C', '#004D40'],
                ['#F1F8E9', '#DCEDC8', '#C5E1A5', '#AED581', '#9CCC65', '#8BC34A', '#7CB342', '#689F38', '#558B2F', '#33691E'],
                ['#FFFDE7', '#FFF9C4', '#FFF59D', '#FFF176', '#FFEE58', '#FFEB3B', '#FDD835', '#FBC02D', '#F9A825', '#F57F17'],
                ['#FFF3E0', '#FFE0B2', '#FFCC80', '#FFB74D', '#FFA726', '#FF9800', '#FB8C00', '#F57C00', '#EF6C00', '#E65100'],
              ],
              formatValue(value) {
                return value.hex;
              },
            }}
          />
          <ListInput
            type="colorpicker"
            label="Pro Mode"
            placeholder="Color"
            readonly
            value={{ hex: '#00ffff' }}
            colorPickerParams={{
              modules: ['initial-current-colors', 'sb-spectrum', 'hsb-sliders', 'rgb-sliders', 'alpha-slider', 'hex', 'palette'],
              openIn: 'auto',
              sliderValue: true,
              sliderValueEditable: true,
              sliderLabel: true,
              hexLabel: true,
              hexValueEditable: true,
              groupedModules: true,
              palette: [
                ['#FFEBEE', '#FFCDD2', '#EF9A9A', '#E57373', '#EF5350', '#F44336', '#E53935', '#D32F2F', '#C62828', '#B71C1C'],
                ['#F3E5F5', '#E1BEE7', '#CE93D8', '#BA68C8', '#AB47BC', '#9C27B0', '#8E24AA', '#7B1FA2', '#6A1B9A', '#4A148C'],
                ['#E8EAF6', '#C5CAE9', '#9FA8DA', '#7986CB', '#5C6BC0', '#3F51B5', '#3949AB', '#303F9F', '#283593', '#1A237E'],
                ['#E1F5FE', '#B3E5FC', '#81D4FA', '#4FC3F7', '#29B6F6', '#03A9F4', '#039BE5', '#0288D1', '#0277BD', '#01579B'],
                ['#E0F2F1', '#B2DFDB', '#80CBC4', '#4DB6AC', '#26A69A', '#009688', '#00897B', '#00796B', '#00695C', '#004D40'],
                ['#F1F8E9', '#DCEDC8', '#C5E1A5', '#AED581', '#9CCC65', '#8BC34A', '#7CB342', '#689F38', '#558B2F', '#33691E'],
                ['#FFFDE7', '#FFF9C4', '#FFF59D', '#FFF176', '#FFEE58', '#FFEB3B', '#FDD835', '#FBC02D', '#F9A825', '#F57F17'],
                ['#FFF3E0', '#FFE0B2', '#FFCC80', '#FFB74D', '#FFA726', '#FF9800', '#FB8C00', '#F57C00', '#EF6C00', '#E65100'],
              ],
              formatValue(value) {
                return `rgba(${value.rgba.join(', ')})`;
              },
            }}
          />
        </List>

      h4 Floating Labels
      :code(lang="svelte")
        <List noHairlinesMd>
          <ListInput
            label="Name"
            floatingLabel
            type="text"
            placeholder="Your name"
            clearButton
          >
            <i class="icon demo-list-icon" slot="media"/>
          </ListInput>

          <ListInput
            label="Password"
            floatingLabel
            type="password"
            placeholder="Your password"
            clearButton
          >
            <i class="icon demo-list-icon" slot="media"/>
          </ListInput>

          <ListInput
            label="E-mail"
            floatingLabel
            type="email"
            placeholder="Your e-mail"
            clearButton
          >
            <i class="icon demo-list-icon" slot="media"/>
          </ListInput>

          <ListInput
            label="URL"
            floatingLabel
            type="url"
            placeholder="URL"
            clearButton
          >
            <i class="icon demo-list-icon" slot="media"/>
          </ListInput>

          <ListInput
            label="Phone"
            floatingLabel
            type="tel"
            placeholder="Your phone number"
            clearButton
          >
            <i class="icon demo-list-icon" slot="media"/>
          </ListInput>

          <ListInput
            label="Resizable"
            floatingLabel
            type="textarea"
            resizable
            placeholder="Bio"
          >
            <i class="icon demo-list-icon" slot="media"/>
          </ListInput>
        </List>

      h4 Floating Labels + Outline Inputs
      :code(lang="svelte")
        <List noHairlinesMd>
          <ListInput
            outline
            label="Name"
            floatingLabel
            type="text"
            placeholder="Your name"
            clearButton
          >
            <i class="icon demo-list-icon" slot="media" />
          </ListInput>
          <ListInput
            outline
            label="Password"
            floatingLabel
            type="password"
            placeholder="Your password"
            clearButton
          >
            <i class="icon demo-list-icon" slot="media" />
          </ListInput>
          <ListInput
            outline
            label="E-mail"
            floatingLabel
            type="email"
            placeholder="Your e-mail"
            clearButton
          >
            <i class="icon demo-list-icon" slot="media" />
          </ListInput>
          <ListInput
            outline
            label="URL"
            floatingLabel
            type="url"
            placeholder="URL"
            clearButton
          >
            <i class="icon demo-list-icon" slot="media" />
          </ListInput>
          <ListInput
            outline
            label="Phone"
            floatingLabel
            type="tel"
            placeholder="Your phone number"
            clearButton
          >
            <i class="icon demo-list-icon" slot="media" />
          </ListInput>
          <ListInput
            outline
            label="Bio"
            floatingLabel
            type="textarea"
            resizable
            placeholder="Bio"
            clearButton
          >
            <i class="icon demo-list-icon" slot="media" />
          </ListInput>
        </List>

      h4 Validation + Additional Info
      :code(lang="svelte")
        <List noHairlinesMd>
          <ListInput
            label="Name"
            type="text"
            placeholder="Your name"
            info="Default validation"
            required
            validate
            clearButton
          >
            <i class="icon demo-list-icon" slot="media"/>
          </ListInput>

          <ListInput
            label="Fruit"
            type="text"
            placeholder="Type 'apple' or 'banana'"
            required
            validate
            pattern="apple|banana"
            clearButton
          >
            <i class="icon demo-list-icon" slot="media"/>
            <span slot="info">Pattern validation (<b>apple|banana</b>)</span>
          </ListInput>

          <ListInput
            label="E-mail"
            type="email"
            placeholder="Your e-mail"
            info="Default e-mail validation"
            required
            validate
            clearButton
          >
            <i class="icon demo-list-icon" slot="media"/>
          </ListInput>

          <ListInput
            label="URL"
            type="url"
            placeholder="Your URL"
            info="Default URL validation"
            required
            validate
            clearButton
          >
            <i class="icon demo-list-icon" slot="media"/>
          </ListInput>

          <ListInput
            label="Number"
            type="text"
            placeholder="Enter number"
            info="With custom error message"
            errorMessage="Only numbers please!"
            required
            validate
            pattern="[0-9]*"
            clearButton
          >
            <i class="icon demo-list-icon" slot="media"/>
          </ListInput>

        </List>

      h4 Icon + Input
      :code(lang="svelte")
        <List noHairlinesMd>
          <ListInput
            type="text"
            placeholder="Your name"
            clearButton
          >
            <i class="icon demo-list-icon" slot="media"/>
          </ListInput>

          <ListInput
            type="password"
            placeholder="Your password"
            clearButton
          >
            <i class="icon demo-list-icon" slot="media"/>
          </ListInput>

          <ListInput
            type="email"
            placeholder="Your e-mail"
            clearButton
          >
            <i class="icon demo-list-icon" slot="media"/>
          </ListInput>

          <ListInput
            type="url"
            placeholder="URL"
            clearButton
          >
            <i class="icon demo-list-icon" slot="media"/>
          </ListInput>

        </List>

      h4 Label + Input
      :code(lang="svelte")
        <List noHairlinesMd>
          <ListInput
            label="Name"
            type="text"
            placeholder="Your name"
            clearButton
          />

          <ListInput
            label="Password"
            type="password"
            placeholder="Your password"
            clearButton
          />

          <ListInput
            label="E-mail"
            type="email"
            placeholder="Your e-mail"
            clearButton
          />

          <ListInput
            label="URL"
            type="url"
            placeholder="URL"
            clearButton
          />
        </List>

      h4 Only Inputs
      :code(lang="svelte")
        <List noHairlinesMd>
          <ListInput
            type="text"
            placeholder="Your name"
            clearButton
          />

          <ListInput
            type="password"
            placeholder="Your password"
            clearButton
          />

          <ListInput
            type="email"
            placeholder="Your e-mail"
            clearButton
          />

          <ListInput
            type="url"
            placeholder="URL"
            clearButton
          />
        </List>

      h4 Inputs + Additional Info
      :code(lang="svelte")
        <List noHairlinesMd>
          <ListInput
            type="text"
            placeholder="Your name"
            info="Full name please"
            clearButton
          />

          <ListInput
            type="password"
            placeholder="Your password"
            info="8 characters minimum"
            clearButton
          />

          <ListInput
            type="email"
            placeholder="Your e-mail"
            info="Your work e-mail address"
            clearButton
          />

          <ListInput
            type="url"
            placeholder="URL"
            info="Your website URL"
            clearButton
          />
        </List>

      h4 Only Inputs Inset
      :code(lang="svelte")
        <List inset>
          <ListInput
            type="text"
            placeholder="Your name"
            clearButton
          />

          <ListInput
            type="password"
            placeholder="Your password"
            clearButton
          />

          <ListInput
            type="email"
            placeholder="Your e-mail"
            clearButton
          />

          <ListInput
            type="url"
            placeholder="URL"
            clearButton
          />
        </List>
