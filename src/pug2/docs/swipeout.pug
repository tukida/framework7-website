extends ../_docs-template

block vars
  - var title = 'Swipeout | Framework7 Documentation';

block content
  include ../_docs-demo-device

  .docs-nav
    include ../_docs-menu
  .docs-content
    +improveDocsLink
    h1 Swipeout (Swipeable List)
    ul.docs-index
    p Swipeout is an extension of <a href="list-view.html">list view</a> that allows you to swipe over list elements to reveal hidden menu with  available actions, like swipe-to-delete.
    h2 Swipeout Layout
    p Let's look on layout structure of swipeout element in your list views:
    :code(lang="html")
          <div class="list">
            <ul>
              <!-- Additional "swipeout" class on li -->
              <li class="swipeout">
                <!-- Usual list element wrapped with "swipeout-content" -->
                <div class="swipeout-content">
                  <!-- Your list element here -->
                  <div class="item-content">
                    <div class="item-media">...</div>
                    <div class="item-inner">...</div>
                  </div>
                </div>
                <!-- Swipeout actions left -->
                <div class="swipeout-actions-left">
                  <!-- Swipeout actions links/buttons -->
                  <a href="#">Action 1</a>
                  <a href="#">Action 2</a>
                </div>
                <!-- Swipeout actions right -->
                <div class="swipeout-actions-right">
                  <!-- Swipeout actions links/buttons -->
                  <a href="#" class="swipeout-close">Action 1</a>
                  <a href="#" class="swipeout-delete">Delete</a>
                </div>
              </li>
              ...
            </ul>
          </div>
    p Where:
    ul
      li `swipeout-content` - wrapper for your list element. This container will move during swipe over the list item
      li `swipeout-actions-left` - container with left swipeout action buttons/links
      li `swipeout-actions-right` - container with right swipeout action buttons/links
      li `swipeout-close` - additional class on swipeout link that will close swipeout element when you click this link
      li `swipeout-delete` - additional class on swipeout link that will delete swipeout list item when you click this link
    .important-note
      p Note that `swipeout-content` and `swipeout-actions-left/right` should be direct children of <strong>&lt;li&gt;</strong>
    p If you have only "item-content" you can simplify layout by adding "item-content" class to "swipeout-content":
    :code(lang="html")
          <li class="swipeout">
            <div class="swipeout-content item-content">
              <div class="item-media">...</div>
              <div class="item-inner">...</div>
            </div>
            <div class="swipeout-actions-right">
              <a href="#">Action 1</a>
              <a href="#">Action 2</a>
            </div>
          </li>
    p If you use <a href="list-view.html#link-item">link items</a> the layout will be following:
    :code(lang="html")
          <li class="swipeout">
            <div class="swipeout-content">
              <a href="#" class="item-content item-link">
                <div class="item-media">...</div>
                <div class="item-inner">...</div>
              </a>
            </div>
            <div class="swipeout-actions-right">
              <a href="#">Action 1</a>
              <a href="#">Action 2</a>
            </div>
          </li>
    h2 Swipe To Delete
    p Framework7 supports this frequently used feature from the box without single line of JavaScript. All you need is to add `swipeout-delete` class to swipeout actions buttons:
    :code(lang="html")
          <li class="swipeout">
            <div class="swipeout-content item-content">
              <div class="item-media">...</div>
              <div class="item-inner">...</div>
            </div>
            <div class="swipeout-actions-right">
              <!-- Add this button and item will be deleted automatically -->
              <a href="#" class="swipeout-delete">Delete</a>
            </div>
          </li>
    p It is also possible to call Confirm modal when user clicks on "Delete" button, and element will be removed only after confirmation. To make delete on confirmation you need to add additional `data-confirm` and `data-confirm-title` (optional) attributes to Delete link:
    :code(lang="html")
          <li class="swipeout">
            <div class="swipeout-content item-content">
              <div class="item-media">...</div>
              <div class="item-inner">...</div>
            </div>
            <div class="swipeout-actions-right">
              <!-- We add data-confirm and data-confirm-title attributes -->
              <a href="#" class="swipeout-delete" data-confirm="Are you sure want to delete this item?" data-confirm-title="Delete?">Delete</a>
            </div>
          </li>
    h2 Overswipe
    p Swipeouts also support "overswipe" actions that will be triggered automatically if you swipe actions too much. In this case we need to add `swipeout-overswipe` class to required actions button:
    :code(lang="html")
          <li class="swipeout">
            <div class="swipeout-content item-content">
              <div class="item-media">...</div>
              <div class="item-inner">...</div>
            </div>
            <div class="swipeout-actions-right">
              <a href="#">More</a>
              <a href="#" class="swipeout-delete swipeout-overswipe">Delete</a>
              </div>
            </div>
          </li>
    .important-note
      ul
        li
          p <b>overswipe</b> can be used only on last button in right swipeout actions, and only on first button in left swipeout actions.
        li
          p With overswipe, script will automatically trigger "click" event on overswipe button, so you need to add appropriate event listener to this button
        li
          p Overswipe button will have additonal `swipeout-overswipe-active` class during overswipe which you can use for additional styling of such state
    :code(lang="html")
          <li class="swipeout">
            <div class="swipeout-content">
              <a href="#" class="item-content item-link">
                ...
              </a>
            </div>
            <div class="swipeout-actions-left">
              <a href="#" class="swipeout-overswipe bg-green reply">Reply</a>
              <a href="#" class="bg-blue forward">Forward</a>
            </div>
            <div class="swipeout-actions-right">
              <a href="#" class="mark bg-orange">Mark</a>
              <a href="#" class="swipeout-delete swipeout-overswipe">Delete</a>
            </div>
          </li>
    h2 Swipeout App Methods
    p Swipeouts also has rich JavaScript API that allows you to control swipeout elements. Let's look on appropriate App's methods:
    .method-wrap
      p
        span.method app.swipeout.open(<span>el</span>, <span>side</span>, <span>callback</span>)</span> - reveal swipeout actions on specified element
      ul.method-parameters
        li
          span.parameter el
          |  - <span class="parameter-type">HTMLElement</span> or <span class="parameter-type">string</span> (with CSS Selector) of list (&lt;li&gt;) element with "swipeout" class. Required
        li
          span.parameter side
          |  - <span class="parameter-type">string</span> (could be "left" or "right") swipeout actions to open. Should be specified if item has both left and right swipeout actions. Optional
        li
          span.parameter callback
          |  - <span class="parameter-type">function</span> - callback function will be executed after swipeout element completes its opening animation

    .method-wrap
      p
        span.method app.swipeout.close(<span>el</span>, <span>callback</span>)</span> - close swipeout actions on specified element
      ul.method-parameters
        li
          span.parameter el
          |  - <span class="parameter-type">HTMLElement</span> or <span class="parameter-type">string</span> (with CSS Selector) of list (&lt;li&gt;) element with "swipeout" class. Required
        li
          span.parameter callback
          |  - <span class="parameter-type">function</span> - callback function will be executed after swipeout element completes its closing animation
    .method-wrap
      p
        span.method app.swipeout.delete(<span>el</span>, <span>callback</span>)</span> - delete specified swipeout element
      ul.method-parameters
        li
          span.parameter el
          |  - <span class="parameter-type">HTMLElement</span> or <span class="parameter-type">string</span> (with CSS Selector) of list (&lt;li&gt;) element with "swipeout" class. Required
        li
          span.parameter callback
          |  - <span class="parameter-type">function</span> - callback function will be executed after swipeout element completes its delete animation right before it will be removed from DOM
    .method-wrap
      p
        span.method app.swipeout.el</span> - property. Currently opened swipeout HTMLElement. Or `undefined` if there is no opened swipeout element


    h2 Swipeout App Parameters
    p It is possible to configure global swipeout behavior on app initialisation by passing swipeout related paremeters under `swipeout` property.
    table.params-table
      thead
        tr
          th Parameter
          th Type
          th Default
          th Description
      tbody
        tr
          td noFollow
          td boolean
          td false
          td Fallback option for potentially better performance on old/slow devices. If you enable it, then swipeout item will not follow your finger during touch, it will be automatically opened/closed on swipe left/right.
        tr
          td removeElements
          td boolean
          td true
          td When disabled, then framework will not remove swipeout element from DOM on "swipeout-delete" click. Useful to enable if you use another library like Vue or React to manage (remove) swipeout items
        tr
          td removeElementsWithTimeout
          td boolean
          td false
          td When enabled, then framework will remove swipeout element from DOM on "swipeout-delete" click after specified delay
        tr
          td removeElementsTimeout
          td number
          td 0
          td Delay in ms to remove swipeout item if `removeElementsWithTimeout` is enabled.
        tr
          td overswipeRatio
          td number
          td 1.2
          td Defines how much/hard needed to swipe to trigger overswipe (defaults to 1.2)
    p To change these parameters we need to pass them on app init under `swipeout` property, for example:
    :code(lang="js")
          var app = new Framework7({
            swipeout: {
              noFollow: true,
              removeElements: false
            }
          });

    h2 Swipeout Events
    p Swipeout will fire the following DOM events and events on app instance:
    h3 DOM Events
    table.events-table
      thead
        tr
          th Event
          th Target
          th Description
      tbody
        tr
          td swipeout
          td Swipeout Element<span>&lt;li class="swipeout"&gt;</span>
          td Event will be triggered while you move swipeout element. `event.detail` contains current opening progress percentage
        tr
          td swipeout:open
          td Swipeout Element<span>&lt;li class="swipeout"&gt;</span>
          td Event will be triggered when swipeout element starts its opening animation
        tr
          td swipeout:opened
          td Swipeout Element<span>&lt;li class="swipeout"&gt;</span>
          td Event will be triggered after swipeout element completes its opening animation
        tr
          td swipeout:close
          td Swipeout Element<span>&lt;li class="swipeout"&gt;</span>
          td Event will be triggered when swipeout element starts its closing animation
        tr
          td swipeout:closed
          td Swipeout Element<span>&lt;li class="swipeout"&gt;</span>
          td Event will be triggered after swipeout element completes its closing animation
        tr
          td swipeout:delete
          td Swipeout Element<span>&lt;li class="swipeout"&gt;</span>
          td Event will be triggered after swipeout element starts its delete animation
        tr
          td swipeout:deleted
          td Swipeout Element<span>&lt;li class="swipeout"&gt;</span>
          td Event will be triggered after swipeout element completes its delete animation right before it will be removed from DOM
        tr
          td swipeout:overswipeenter
          td Swipeout Element<span>&lt;li class="swipeout"&gt;</span>
          td Event will be triggered when overswipe enabled
        tr
          td swipeout:overswipeexit
          td Swipeout Element<span>&lt;li class="swipeout"&gt;</span>
          td Event will be triggered when overswipe disabled
    h3 App Instance Events
    p Sortable instance emit events on app instance.
    table.events-table
      thead
        tr
          th Event
          th Target
          th Arguments
          th Description
      tbody
        tr
          td swipeout
          td app
          td <span>progress</span>
          td Event will be triggered while you move swipeout element
        tr
          td swipeoutOpen
          td app
          td <span>swipeoutEl</span>
          td Event will be triggered when swipeout element starts its opening animation
        tr
          td swipeoutOpened
          td app
          td <span>swipeoutEl</span>
          td Event will be triggered after swipeout element completes its opening animation
        tr
          td swipeoutClose
          td app
          td <span>swipeoutEl</span>
          td Event will be triggered when swipeout element starts its closing animation
        tr
          td swipeoutClosed
          td app
          td <span>swipeoutEl</span>
          td Event will be triggered after swipeout element completes its closing animation
        tr
          td swipeoutDelete
          td app
          td <span>swipeoutEl</span>
          td Event will be triggered after swipeout element starts its delete animation
        tr
          td swipeoutDeleted
          td app
          td <span>swipeoutEl</span>
          td Event will be triggered after swipeout element completes its delete animation right before it will be removed from DOM
        tr
          td swipeoutOverswipeEnter
          td app
          td <span>swipeoutEl</span>
          td Event will be triggered when overswipe enabled
        tr
          td swipeoutOverswipeExit
          td app
          td <span>swipeoutEl</span>
          td Event will be triggered when overswipe disabled

    +cssVars('swipeout')

    .with-device
      h2(data-device-preview="../docs-demos/core/swipeout.html") Examples
      include:coreSource ../docs-demos/core/swipeout.f7.html
