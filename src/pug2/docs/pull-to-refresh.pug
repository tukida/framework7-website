extends ../_docs-template

block vars
  - var title = 'Pull To Refresh | Framework7 Documentation';

block content
  include ../_docs-demo-device

  .docs-nav
    include ../_docs-menu
  .docs-content
    +improveDocsLink
    h1 Pull To Refresh
    ul.docs-index
    p Pull to refresh is a special component that can be used to initiate the refreshing of a pageâ€™s contents.
    h2 Pull To Refresh Layout
    p Let's look on how to integrate pull to refresh to page:
    :code(lang="html")
      <div class="page">
        <!-- Page content must have additional "ptr-content" class -->
        <div class="page-content ptr-content" data-ptr-distance="55" data-ptr-mousewheel="true">
          <!-- Default pull to refresh preloader-->
          <div class="ptr-preloader">
            <div class="preloader"></div>
            <div class="ptr-arrow"></div>
          </div>

          <!-- usual content below -->
          <div class="list">
            ...
          </div>

          <!-- nested scrollable element -->
          <div class="my-scolling-content ptr-watch-scrollable">
            ...
          </div>

          <!-- another nested scrollable element -->
          <div class="another-scolling-content ptr-ignore">
            ...
          </div>
        </div>
      </div>
    p Where:
      ul
        li `ptr-content` class. This is required to enable pull to refresh
        li `div class="ptr-preloader"` hidden layer with pull to refresh visual elements: preloader and arrow
        li `data-ptr-distance="55"` additional attribute that allows to set custom pull to refresh trigger distance. By default (if not specified) it is 44px
        li `data-ptr-mousewheel="true"` additional attribute that enables pull to refresh with mousewheel (for desktop apps). Works only for PTR top.
        li `ptr-watch-scrollable` - additional class that must be added on nested scrollable elements to prevent pull to refresh on such elements scrolling
        li `ptr-ignore` - additional class that must be added on nested scrollable elements or other elements that will to prevent pull to refresh on such elements scrolling or touchmove
    h2 Pull To Refresh From Bottom
    p It is also possible to make it work like pull from bottom. In this case we need to move `ptr-preloader` element to the bottom of page content and add additional `ptr-bottom` class to pull to refresh content:
    :code(lang="html")
      <div class="page">
        <!-- ptr-content must have additional "ptr-bottom" class -->
        <div class="page-content ptr-content ptr-bottom">
          <div class="list">
            ...
          </div>

          <!-- Pull to refresh preloader moves to bottom -->
          <div class="ptr-preloader">
            <div class="preloader"></div>
            <div class="ptr-arrow"></div>
          </div>
        </div>
      </div>
    h2 Pull To Refresh Sequence
    p When user starts to pull <b>ptr-content</b> down, then <b>ptr-preloader</b> will receive additional `ptr-pull-down` class.
    p When user pulls down <b>ptr-content</b> on a distance more than 44px (when <b>ptr-preloader</b> will be fully visible), then <b>ptr-preloader</b> will receive additional `ptr-pull-up` class which changes arrow rotation to notify user about refresh action on release.
    p When user release pull to refresh content when it is in "ptr-pull-up" state, then <b>ptr-preloader</b> will receive additional `ptr-refreshing` class. In "refreshing" state arrow will be hidden and user will see preloader indicator. On this stage you probably need to do Ajax request and refresh page content.
    h2 Pull To Refresh App Methods
    p There are few App's methods that can be used with pull to refresh container:
    .method-wrap
      p
        span.method app.ptr.create(<span>el</span>)
        span - initialise PTR on specified HTML element container.
      ul.method-parameters
        li
          span.parameter el
          |  - <span class="parameter-type">HTMLElement</span> or <span class="parameter-type">string</span> (with CSS selector) - PTR element (`ptr-content`). Required.
      p.method-returns Method returns created PTR instance
      .important-note Use this method only in case you have added ptr content after page init or if you want to enable it later. Otherwise if there is "ptr-content" element on page init it will be created automatically
    .method-wrap
      p
        span.method app.ptr.destroy(<span>el</span>)
        span - remove PTR event listeners from the specified HTML element
      ul.method-parameters
        li
          span.parameter el
          |  - <span class="parameter-type">HTMLElement</span> or <span class="parameter-type">string</span> (with CSS selector) - PTR element (`ptr-content`). Required.
    .method-wrap
      p
        span.method app.ptr.get(<span>el</span>)
        | - get PTR instance by HTML element
      ul.method-parameters
        li
          span.parameter el
          |  - <span class="parameter-type">HTMLElement</span> or <span class="parameter-type">string</span> (with CSS Selector). PTR element (`ptr-content`).
      p.method-returns Method returns PTR instance
    .method-wrap
      p
        span.method app.ptr.done(<span>el</span>)
        | - reset PTR state on specified PTR content element
      ul.method-parameters
        li
          span.parameter el
          |  - <span class="parameter-type">HTMLElement</span> or <span class="parameter-type">string</span> (with CSS Selector). PTR element (`ptr-content`). Required.
    .method-wrap
      p
        span.method app.ptr.refresh(<span>el</span>)
        | - trigger PTR on specified PTR content element
      ul.method-parameters
        li
          span.parameter el
          |  - <span class="parameter-type">HTMLElement</span> or <span class="parameter-type">string</span> (with CSS Selector). PTR element (`ptr-content`). Required.
    h2 Pull To Refresh Methods & Properties
    p If we created PTR manually or used `app.ptr.get` method we will PTR initialized instance with useful methods and properties:
    :code(lang="js")
          // init ptr manually
          var ptr = app.ptr.create('.ptr-content');

          // or using get to retrieve already created instance
          var ptr = app.ptr.get('.ptr-content');
    table.methods-table
      tbody
        tr
          th(colspan="2") Properties
        tr
          td ptr.app
          td Link to global app instance
        tr
          td ptr.el
          td PTR HTML element (`ptr-content`)
        tr
          td ptr.$el
          td Dom7 instance with PTR HTML element (`ptr-content`)
        tr
          th(colspan="2") Methods
        tr
          td ptr.done()
          td Reset PTR state
        tr
          td ptr.refresh()
          td Trigger PTR
        tr
          td ptr.destroy()
          td Destroy PTR instance and remove PTR event listeners from the specified HTML element
    h2 Pull To Refresh Events
    p PTR will fire the following DOM events on popup element and events on app and popup instance:
    h3 DOM Events
    table.events-table
      thead
        tr
          th Event
          th Target
          th Description
      tbody
        tr
          td ptr:pullstart
          td Pull To Refresh content<span>&lt;div class="ptr-content"&gt;</span>
          td Event will be triggered when you start to move pull to refresh content
        tr
          td ptr:pullmove
          td Pull To Refresh content<span>&lt;div class="ptr-content"&gt;</span>
          td Event will be triggered during you move pull to refresh content
        tr
          td ptr:pullend
          td Pull To Refresh content<span>&lt;div class="ptr-content"&gt;</span>
          td Event will be triggered when you release pull to refresh content
        tr
          td ptr:refresh
          td Pull To Refresh content<span>&lt;div class="ptr-content"&gt;</span>
          td Event will be triggered when pull to refresh enters in "refreshing" state. `event.detail` contain `ptr.done` method to reset its state after loading completed
        tr
          td ptr:done
          td Pull To Refresh content<span>&lt;div class="ptr-content"&gt;</span>
          td Event will be triggered after pull to refresh is done and it is back to initial state (after calling `ptr.done` method)
        tr
          td ptr:beforedestroy
          td Pull To Refresh content<span>&lt;div class="ptr-content"&gt;</span>
          td Event will be triggered right before PTR instance will be destroyed
    h3 App and Pull To Refresh Instance Events
    p PTR instance emits events on both self instance and app instance. App instance events has same names prefixed with `ptr`.
    table.events-table.double-events-table
      thead
        tr
          th Event
          th Target
          th Arguments
          th Description
      tbody
        tr
          td pullStart
          td ptr
          td <span>(el)</span>
          td(rowspan="2") Event will be triggered when you start to move pull to refresh content. As an argument event handler receives ptr element
        tr
          td ptrPullStart
          td app
          td <span>(el)</span>

        tr
          td pullMove
          td ptr
          td <span>(el, data)</span>
          td(rowspan="2") Event will be triggered during you move pull to refresh content. As an argument event handler receives ptr element and ptr data containing the following properties:
            ul
              li `event` - touchmove event
              li `scrollTop` - current scroll top position
              li `translate` - current translateY offset
              li `touchesDiff` - touches difference (in px)
        tr
          td ptrPullMove
          td app
          td <span>(el, data)</span>

        tr
          td pullEnd
          td ptr
          td <span>(el, data)</span>
          td(rowspan="2") Event will be triggered when you release pull to refresh content. As an argument event handler receives ptr element
        tr
          td ptrPullEnd
          td app
          td <span>(el, data)</span>

        tr
          td refresh
          td ptr
          td <span>(el, done)</span>
          td(rowspan="2") Event will be triggered when pull to refresh enters in "refreshing" state. As an argument event handler receives ptr element and `done` function to reset PTR state
        tr
          td ptrRefresh
          td app
          td <span>(el, done)</span>

        tr
          td done
          td ptr
          td <span>(el)</span>
          td(rowspan="2") Event will be triggered after pull to refresh is done and it is back to initial state (after calling `ptr.done` method). As an argument event handler receives ptr element
        tr
          td ptrDone
          td app
          td <span>(el)</span>

        tr
          td beforeDestroy
          td ptr
          td <span>(ptr)</span>
          td(rowspan="2") Event will be triggered right before PTR instance will be destroyed. As an argument event handler receives PTR instance
        tr
          td ptrBeforeDestroy
          td app
          td <span>(ptr)</span>

    +cssVars('pull-to-refresh')

    h2 Examples
    .with-device
      h4(data-device-preview="../docs-demos/core/pull-to-refresh.html") Pull From Top
      include:coreSource ../docs-demos/core/pull-to-refresh.f7.html

      h4(data-device-preview="../docs-demos/core/pull-to-refresh-bottom.html") Pull From Bottom
      include:coreSource ../docs-demos/core/pull-to-refresh-bottom.f7.html
