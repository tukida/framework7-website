extends ../_docs-template

block vars
  - var title = 'Navbar | Framework7 Documentation';

block content
  include ../_docs-demo-device

  .docs-nav
    include ../_docs-menu
  .docs-content
    +improveDocsLink
    h1 Navbar
    ul.docs-index
    p Navbar is a fixed area at the top of a screen that contains Page title and navigation elements.
    p Navbar has 3 main parts: `Left`, `Title` and `Right`. Each part may contain any HTML content, but it is recommended to use them in the following way:
    ul
      li
        p <strong>Left</strong> part is designed to be used with "back link", icons or with single text link.
      li
        p <strong>Title</strong> part is used to display page title or tab links (buttons row/segmented controller).
      li
        p <strong>Right</strong> part is for the same as the Left part.

    h2 Navbar HTML Layout
    p Navbar layout is pretty simple and self explaining:
    :code(lang="html")
          <div class="navbar">
              <div class="navbar-bg"></div>
              <div class="navbar-inner">
                  <div class="left">Left</div>
                  <div class="title">Page Title</div>
                  <div class="right">Right</div>
              </div>
          </div>
    .important-note
      p Note that Navbar's `Title` element has lowest width priority, and when window screen will not fit all three elements Title part will be cut.
      p So if you use plain text in `Title` part it will have ellipsis (...) on the end when it is cut. But you need to take care about it if you have some custom elements there.
    h3 Navbar With Links
    p To add links in Left or Right part you just need to add the plain `<a>` tag with additional `link` class:
    :code(lang="html")
          <div class="navbar">
              <div class="navbar-bg"></div>
              <div class="navbar-inner">
                  <div class="left">
                      <a href="#" class="link">Left Link</a>
                  </div>
                  <div class="title">Page Title</div>
                  <div class="right">
                      <a href="#" class="link">Right Link</a>
                  </div>
              </div>
          </div>
    h3 Multiple Links
    p Nothing extraordinary. Just add more `<a class="link">` to the required part:
    :code(lang="html")
          <div class="navbar">
              <div class="navbar-bg"></div>
              <div class="navbar-inner">
                  <div class="left">
                      <a href="#" class="link">Left 1</a>
                      <a href="#" class="link">Left 2</a>
                  </div>
                  <div class="title">Page Title</div>
                  <div class="right">
                      <a href="#" class="link">Right 1</a>
                  </div>
              </div>
          </div>
    h3 Links With Icons + Text
    p Here comes a little difference. In this case we need to <strong>wrap link's text with</strong> `<span>` element. It is required for correct spacing between icon and "word", and for animation:
    :code(lang="html")
          <div class="navbar">
              <div class="navbar-bg"></div>
              <div class="navbar-inner">
                  <div class="left">
                      <a href="#" class="link back">
                          <i class="icon icon-back"></i>
                          <span>Back</span>
                      </a>
                  </div>
                  <div class="title">Title</div>
                  <div class="right">
                      <a href="#" class="link">
                          <i class="icon another-icon"></i>
                          <span>Menu</span>
                      </a>
                  </div>
              </div>
          </div>
    h3 Links With Icons Only
    p If need links with icons and without text we need to additional `icon-only` class to links. With this class link will have fixed size so we can't miss it with finger:
    :code(lang="html")
          <div class="navbar">
              <div class="navbar-bg"></div>
              <div class="navbar-inner">
                  <div class="left">
                      <a href="#" class="link icon-only">
                          <i class="icon icon-back"></i>
                      </a>
                  </div>
                  <div class="title">Title</div>
                  <div class="right">
                      <a href="#" class="link icon-only">
                          <i class="icon another-icon"></i>
                      </a>
                  </div>
              </div>
          </div>

    h3 Transparent Navbar
    p This feature available since Framework7 version 5.5.0.
    p Transparent navbar appears with transparent background and transparent title and on page scroll it becomes opaque. To enable transparent navbar we need to add `navbar-transparent` class to `navbar`:
    ```html
      <!-- additional "navbar-transparent" class -->
      <div class="navbar navbar-transparent">
        ...
      </div>
    ```

    h3 Large Title
    p Large-title navbar has additional "row" (or "bar") with large title text, which is get collapsed on page scroll. To make it large we need to add additional `navbar-large` class to `navbar` and add additional `title-large` element to it:
    :code(lang="html")
      <!-- additional "navbar-large" class -->
      <div class="navbar navbar-large">
        <div class="navbar-bg"></div>
        <div class="navbar-inner">
          <div class="left">
            <!-- ... -->
          </div>
          <!-- usual title will be visible when larger title collapsed -->
          <div class="title">My App</div>
          <div class="right">
            <!-- ... -->
          </div>
          <!-- large title element -->
          <div class="title-large">
            <div class="title-large-text">My App</div>
          </div>
        </div>
      </div>

    h3 Large Transparent Title
    p We can also enabled large-title navbar to be "transparent". When it is enabled, navbar background and its main title are hidden until page scrolled.
    p To make large title transparent we need additional `navbar-transparent` class:
    :code(lang="html")
      <!-- additional "navbar-transparent" class -->
      <div class="navbar navbar-large navbar-transparent">
        <div class="navbar-bg"></div>
        <div class="navbar-inner">
          ...
        </div>
      </div>

    h3 Theme-specific Styling
    p In `ios` and `aurora` themes Navbar has thin border on the bottom. To disable this border you need to add `no-hairline` class to navbar element:
    :code(lang="html")
          <div class="navbar no-hairline">...</div>
    p In `md` theme Navbar has shadow. To disable this shadow you need to add `no-shadow` class to navbar element:
    :code(lang="html")
          <div class="navbar no-shadow">...</div>

    h2 Navbar Type
    p Now let's look where we can place our Navbar in DOM. There are several rules to place Navbar.

    h3 Static Navbar Type
    p Static navbar position is the probably most rarely used layout type. In this case Navbar is just part of the scrollable page content:
    :code(lang="html")
          <div class="page">
            <!-- Scrollable page content -->
            <div class="page-content">
              <!-- Static navbar goes in the beginning inside of page-content -->
              <div class="navbar">...</div>
              ...

            </div>
          </div>

    h3 Fixed Navbar Type
    p Fixed navbar is also part of the page but it is always visible on screen not depending on page scroll. In this case it must be a direct child of page and if page has also fixed toolbar then it must be BEFORE the toolbar:
    :code(lang="html")
      <div class="page">
        <!-- Fixed navbar goes ALWAYS FIRST -->
        <div class="navbar">...</div>
        <!-- Fixed toolbar goes ALWAYS AFTER navbar -->
        <div class="toolbar toolbar-bottom">...</div>

        <!-- Scrollable page content -->
        <div class="page-content">
          ...
        </div>
      </div>
    .important-note
      p
        b Fixed Navbar must always be a direct child of a page and BEFORE the toolbar (if fixed toolbar is used on this page)

    h3 Common Navbar Type
    p If we need only one common navbar for all pages in View then it must be a direct child of this view and be BEFORE all pages in view:
    :code(lang="html")
          <div class="view">
            <!-- View common navbar -->
            <div class="navbar">...</div>

            <!-- Pages -->
            <div class="page">...</div>
          </div>
    p If we need only one common navbar / navbar for all views then it must be a direct child of Views element and be BEFORE all views.
    :code(lang="html")
          <div class="views tabs">
            <!-- Views common navbar -->
            <div class="navbar">...</div>

            <div class="view tab tab-active" id="tab-1">...</div>
            <div class="view tab" id="tab-2">...</div>
            ...
          </div>
    .important-note
      p
        b Common Navbar must always be a direct child of Views/View and BEFORE the Toolbar (if common Toolbar is also used)
    h2 Dynamic Navbar
    p.ios-only Dynamic Navbar is supported only in iOS Theme
    p One of the iOS-theme awesome features is the dynamic navbar. Navbar's elements will slide and fade during pages transition and swipe back when dynamic navbar is enabled.
    p It is enabled by default when you use "Fixed-positioned" navbars, when Navbar is a direct child of the page.
    p If you want to disable it you need to pass `iosDynamicNavbar: false` for required View on its initialisation or in global <a href="app.html#app-parameters">app parameters</a> for all views. For example:
    :code(lang="js")
      // Disable globally
      var app = new Framework7({
        view: {
          iosDynamicNavbar: false,
        },
      });

      // Disable only for view on its initialisation
      var mainView = app.views.create('.view-main', {
        iosDynamicNavbar: false,
      });
    .important-note
      p Note that when Dynamic Navbar (`iosDynamicNavbar`) is enabled, Navbar HTML element will be detached from the page and moved under View HTML element. In this case to access page related dynamic navbar element use `app.navbar.getElByPage(pageEl)` <a href="#navbar-app-methods">method</a>
    h3 Dynamic Navbar Layout
    p Dynamic Navbar layout is the same as for usual Navbar, the only difference is that you can add additional classes to the Navbar parts (Left, Title, Right) to tell which type of transition effect you want on this part:
    ul
      li
        p By default (if there is no additional classes) each Navbar part has <b>"Fade"</b> transition effect
      li
        p If you add `sliding` class to any of Navbar parts then it will have <b>"Sliding"</b> effect
      li
        p If you add `sliding` class to the `navbar-inner` then <b>all</b> Navbar parts will have <b>"Sliding"</b> effect
      li
        p For better look you should keep identic transition type for the same Navbar parts through different pages.
    :code(lang="html")
      <!-- No additional classes, all elements will have "fade" effect on page transition -->
      <div class="navbar">
        <div class="navbar-bg"></div>
        <div class="navbar-inner">
          <div class="left">
            <a href="#" class="link">Home Left</a>
          </div>
          <div class="title">Home</div>
          <div class="right">
            <a href="#" class="link">Home Right</a>
          </div>
        </div>
      </div>

      <!-- Title and Left will have "sliding" effect on page transition -->
      <div class="navbar">
        <div class="navbar-bg"></div>
        <div class="navbar-inner">
          <!-- Additional "sliding" class -->
          <div class="left sliding">
            <a href="#" class="link">Home Left</a>
          </div>
          <!-- Additional "sliding" class -->
          <div class="title sliding">Home</div>
          <div class="right">
            <a href="#" class="link">Home Right</a>
          </div>
        </div>
      </div>

      <!-- All parts will have "sliding" effect on page transition -->
      <div class="navbar">
        <div class="navbar-bg"></div>
        <!-- Additional "sliding" class -->
        <div class="navbar-inner sliding">
          <div class="left">
            <a href="#" class="link">Home Left</a>
          </div>
          <div class="title">Home</div>
          <div class="right">
            <a href="#" class="link">Home Right</a>
          </div>
        </div>
      </div>

    h2 Navbar App Methods
    p We can use following app methods available for Navbar:
    table.methods-table
      tbody
        tr
          td app.navbar.hide(<span>navbarEl</span>, <span>animate</span>, <span>hideStatusbar</span>)
          td Hide navbar
            ul.method-parameters
              li <span class="parameter">navbarEl</span> - <span class="parameter-type">HTMLElement</span> or <span class="parameter-type">string</span> (with CSS Selector) of required navbar. Required.
              li <span class="parameter">animate</span> - <span class="parameter-type">Boolean</span> - whether it should be hidden with animation or not. By default is `true`
              li <span class="parameter">hideStatusbar</span> - <span class="parameter-type">Boolean</span> - when `false` (default) it hides navbar partially keeping space required to cover statusbar area. Otherwise, navbar will be fully hidden.
        tr
          td app.navbar.show(<span>navbarEl</span>, <span>animate</span>)
          td Show navbar
            ul.method-parameters
              li <span class="parameter">navbarEl</span> - <span class="parameter-type">HTMLElement</span> or <span class="parameter-type">string</span> (with CSS Selector) of required navbar. Required.
              li <span class="parameter">animate</span> - <span class="parameter-type">Boolean</span> - whether it should be shown with animation or not. By default is `true`
        tr
          td app.navbar.size(<span>navbarEl</span>)
          td Recalculate positional styles for Navbar elements. It could be useful after you change some of Navbar elements dynamically.
            ul.method-parameters
              li <span class="parameter">navbarEl</span> - <span class="parameter-type">HTMLElement</span> or <span class="parameter-type">string</span> (with CSS Selector) of required navbar. Required.
        tr
          td app.navbar.getElByPage(<span>pageEl</span>)
          td Get navbar HTML element by specified page element. Useful only when dynamic navbar is enabled. In this case it is out of the page container.
            ul.method-parameters
              li <span class="parameter">pageEl</span> - <span class="parameter-type">HTMLElement</span> or <span class="parameter-type">string</span> (with CSS Selector) of page where to look for navbar. Required.
        tr
          td app.navbar.getPageByEl(<span>navbarEl</span>)
          td Get page HTML element by specified navbar element. Useful only when dynamic navbar is enabled. In this case it is out of the page container.
            ul.method-parameters
              li <span class="parameter">navbarEl</span> - <span class="parameter-type">HTMLElement</span> or <span class="parameter-type">string</span> (with CSS Selector) of navbar to find relative page. Required.
        tr
          td app.navbar.collapseLargeTitle(<span>navbarEl</span>)
          td Collapse large navbar title
            ul.method-parameters
              li <span class="parameter">navbarEl</span> - <span class="parameter-type">HTMLElement</span> or <span class="parameter-type">string</span> (with CSS Selector) of navbar to collapse. Required.
        tr
          td app.navbar.expandLargeTitle(<span>navbarEl</span>)
          td Expand large navbar title
            ul.method-parameters
              li <span class="parameter">navbarEl</span> - <span class="parameter-type">HTMLElement</span> or <span class="parameter-type">string</span> (with CSS Selector) of navbar to expand. Required.
        tr
          td app.navbar.toggleLargeTitle(<span>navbarEl</span>)
          td Toggle large navbar title
            ul.method-parameters
              li <span class="parameter">navbarEl</span> - <span class="parameter-type">HTMLElement</span> or <span class="parameter-type">string</span> (with CSS Selector) of navbar to toggle (collapse or expand). Required.
    h2 Navbar App Parameters
    p It is possible to control some default navbar behavior using global <a href="app.html#app-parameters">app parameters</a> by passing navbar related parameters under `navbar` parameter:
    table.params-table
      thead
        tr
          th Parameter
          th Type
          th Default
          th Description
      tbody
        tr
          td hideOnPageScroll
          td boolean
          td false
          td Will hide Navbars on page scroll
        tr
          td showOnPageScrollEnd
          td boolean
          td true
          td Set to `true` to show hidden Navbar when scrolling reaches end of the page
        tr
          td showOnPageScrollTop
          td boolean
          td true
          td Set to `false` and hidden Navbar will not become visible when you scroll page to top everytime. They will become visible only at the most top scroll position, in the beginning of the page
        tr
          td scrollTopOnTitleClick
          td boolean
          td true
          td When enabled then every click on navbar's title element will scroll related page to the top
        tr
          td iosCenterTitle
          td boolean
          td true
          td When enabled then it will try to position title at the center in iOS theme. Sometime (with some custom design) it may not needed.
        tr
          td mdCenterTitle
          td boolean
          td false
          td When enabled then it will try to position title at the center in MD theme. Sometime (with some custom design) it may not needed.
        tr
          td auroraCenterTitle
          td boolean
          td true
          td When enabled then it will try to position title at the center in Aurora theme. Sometime (with some custom design) it may not needed.
        tr
          td collapseLargeTitleOnScroll
          td boolean
          td true
          td When enabled large title will be collapsed on page scroll top, and expanded again on top of the page.
        tr
          td snapPageScrollToLargeTitle
          td boolean
          td true
          td When enabled it will snap page scroll to large title collapse/expand positions, so it will make impossible to leave page scroll in the middle of large title position. Has effect only when `collapseLargeTitleOnScroll` is enabled.
        tr
          td snapPageScrollToTransparentNavbar
          td boolean
          td true
          td When enabled it will snap page scroll to transparent navbar size, so it will make impossible to leave page scroll in the middle of transparent navbar position.


    p For example:
    :code(lang="js")
          var app = new Framework7({
            navbar: {
              hideOnPageScroll: true,
              iosCenterTitle: false,
            },
          });
    h2 Control Navbar With Page Classes
    p Framework7 allows you to hide/show Navbar on specific page or on specific page scroll by using additional classes.

    p If you want to hide navbar on page scroll on some specific page use additional classes on this page's `<div class="page-content">` element:
    ul
      li `hide-bars-on-scroll` - to hide both Navbar and Toolbar on page scroll
      li `hide-navbar-on-scroll` - to hide Navbar on page scroll

    p To disable this behavior on specific pages you may use the following additional classes:
    ul
      li `keep-bars-on-scroll` - to keep Navbar and Toolbar on page scroll
      li `keep-navbar-on-scroll` - to keep Navbar on page scroll
    p For example:
    :code(lang="html")
          <div class="page">
            <div class="navbar">
              ...
            </div>
            <!-- "hide-navbar-on-scroll" class to hide Navbar -->
            <div class="page-content hide-navbar-on-scroll">
              <div class="block">
                <p>Scroll page down</p>
                ...
              </div>
            </div>
          </div>

    p If you have common single Navbar across all pages/views of your app you can hide/show Navbar automatically for some pages where you don't need it.
    p To make it work all you need is to add `no-navbar` class to loaded page (`<div class="page no-navbar">`):
    :code(lang="html")
          <!-- Page has additional "no-navbar" class -->
          <div class="page no-navbar">
            <div class="page-content">
                ...
            </div>
          </div>

    h2 Navbar Events
    p Navbar will fire the following DOM events on Navbar element (`<div class="navbar">`) and app events on app instance:

    h3 DOM Events
    table.events-table
      thead
        tr
          th Event
          th Target
          th Description
      tbody
        tr
          td navbar:hide
          td Navbar <span>&lt;div class="navbar"&gt;</span>
          td Event will be triggered when Navbar becomes hidden
        tr
          td navbar:show
          td Navbar <span>&lt;div class="navbar"&gt;</span>
          td Event will be triggered when Navbar becomes visible
        tr
          td navbar:collapse
          td Navbar <span>&lt;div class="navbar"&gt;</span>
          td Event will be triggered when Navbar with large title collapsed (from large navbar to usual navbar)
        tr
          td navbar:expand
          td Navbar <span>&lt;div class="navbar"&gt;</span>
          td Event will be triggered when Navbar with large title expanded (from usual navbar to large navbar)
    h3 App Events
    table.events-table
      thead
        tr
          th Event
          th Arguments
          th Description
      tbody
        tr
          td navbarHide
          td <span>(el)</span>
          td Event will be triggered when Navbar becomes hidden
        tr
          td navbarShow
          td <span>(el)</span>
          td Event will be triggered when Navbar becomes visible
        tr
          td navbarCollapse
          td <span>(el)</span>
          td Event will be triggered when Navbar with large title collapsed (from large navbar to usual navbar)
        tr
          td navbarExpand
          td <span>(el)</span>
          td Event will be triggered when Navbar with large title expanded (from usual navbar to large navbar)

    +cssVars('navbar')

    .with-device
      h2(data-device-preview="../docs-demos/core/navbar.html") Examples
      h3 Static Navbar
      include:coreSource ../docs-demos/core/navbar_static.f7.html

      h3 Fixed Navbar
      include:coreSource ../docs-demos/core/navbar_fixed.f7.html

      h3 Transparent Navbar
      include:coreSource ../docs-demos/core/navbar_transparent.f7.html

      h3 Large Title
      include:coreSource ../docs-demos/core/navbar_large.f7.html

      h3 Large Transparent
      include:coreSource ../docs-demos/core/navbar_large-transparent.f7.html

      h3 Navbar API
      include:coreSource ../docs-demos/core/navbar_api.f7.html

      h3 Hide On Scroll
      include:coreSource ../docs-demos/core/navbar_hide-on-scroll.f7.html

