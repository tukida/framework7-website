extends ../_docs-template

block vars
  - var title = 'App / Core | Framework7 Documentation';

block content

  .docs-nav
    include ../_docs-menu
  .docs-content
    +improveDocsLink
    h1 App / Core
    ul.docs-index
    p When we init the app we can use the `new Framework7` constructor and pass an object with main app parameters:
    :code(lang="js")
      var app = new Framework7({
        // App id
        id: 'com.myapp.test',
        // Enable swipe panel
        panel: {
          swipe: true,
        },
        // ... other parameters
      });
    p This constructor returns main app Framework7 instance.
    h2 App Parameters
    p Lets look at the list of available parameters:
    table.params-table
      thead
        tr
          th Parameter
          th Type
          th Default
          th Description
      tbody
        tr
          td el
          td string
          td body
          td App root element. If you main app layout is not a direct child of the `<body>` then it is required to specify root element here
        tr
          td component
          td Router Component
          td
          td Load app layout from passed <a href="./router-component.html#main-app-component">main app component</a>. Only for Framework7 Core version
        tr
          td componentUrl
          td string Component
          td
          td Path to Single File <a href="./router-component.html#main-app-component">main app component</a> to be loaded via XHR. Only for Framework7 Core version
        tr
          td id
          td string
          td io.framework7.testapp
          td App bundle id.
        tr
          td name
          td string
          td Framework7
          td App name. Can be used by other components, e.g. as the default title for <a href="dialog.html">Dialog</a> component.
        tr
          td version
          td string
          td 1.0.0
          td App version. Can be used by other components.
        tr
          td theme
          td string
          td auto
          td App theme. Can be `ios`, `md`, `aurora` or `auto`. In case of `auto` it will use iOS theme for iOS devices, Aurora theme for desktop device running in Electron environment, and MD theme for all other devices.
        tr
          td language
          td string
          td
          td App language. Can be used by other components. By default equal to the current browser/webview language (i.e. `navigator.language`).
        tr
          td userAgent
          td string
          td
          td User agent string. Required when used on server-side environments for correct device detection.
        tr
          td routes
          td array
          td []
          td Array with default routes to all views.
        tr
          td lazyModulesPath
          td string
          td
          td Path to Framework7's lazy components. Required to use <a href="lazy-modules.html">Lazy Modules</a> with browser modules.
        tr
          td autoDarkTheme
          td boolean
          td false
          td Automatically enables dark theme based on user system color scheme preference. This feature support is based on <a href="https://caniuse.com/#feat=prefers-color-scheme" target="_blank">`(prefers-color-scheme)` media query support</a>.
        tr
          td init
          td boolean
          td true
          td By default Framework7 will be initialized automatically when you call `new Framework7()`. If you want to prevent this behavior you can disable it with this option and then initialize it manually with `app.init()` when you need it.
        tr
          td initOnDeviceReady
          td boolean
          td true
          td If automatic initialization is enabled with `init: true` parameter and app is running under cordova environment then it will be initialized on `deviceready` event.
        tr
          td iosTranslucentBars
          td boolean
          td true
          td Enable translucent effect (blur background) on navigation bars for iOS theme (on iOS devices)
        tr
          td iosTranslucentModals
          td boolean
          td true
          td Enable translucent effect (blur background) on modals (Dialog, Popover, Actions) for iOS theme (on iOS devices)
        tr
          td on
          td object
          td {}
          td
            p Object with events handlers. For example:
            :code(lang="js")
              var app = new Framework7({
                on: {
                  init: function () {
                    console.log('App initialized');
                  },
                  pageInit: function () {
                    console.log('Page initialized');
                  },
                }
              })
        tr
          th(colspan="4") Clicks Module Parameters
        tr
          td clicks
          td object
          td
          td Object with clicks-module related parameters:
            :code(lang="js")
                  var app = new Framework7({
                    clicks: {
                      externalLinks: '.external',
                    }
                  })
        tr.subparam-open-row
          td(colspan="4") {
        tr.subparam-row
          td externalLinks
          td string
          td '.external'
          td CSS selector for links that should be treated as external and shouldn't be handled by Framework7. For example such '.external' value will match to links like `<a href="somepage.html" class="external">` (with class "external")
        tr.subparam-close-row
          td(colspan="4") }
        tr
          th(colspan="4") Touch Module Parameters
        tr
          td touch
          td object
          td
          td Object with touch-module related parameters:
            :code(lang="js")
                  var app = new Framework7({
                    touch: {
                      tapHold: true,
                    }
                  })
        tr.subparam-open-row
          td(colspan="4") {

        tr.subparam-row
          td touchClicksDistanceThreshold
          td number
          td 5
          td Distance threshold (in px) to prevent short swipes. So if tap/move distance is larger than this value then "click" will not be triggered. (Used only for touch events when fastClicks disabled).
        tr.subparam-row
          td disableContextMenu
          td boolean
          td false
          td Set to true to disable context menu (with right click or tap and hold)
        tr.subparam-row
          td tapHold
          td boolean
          td false
          td Enables tap hold
        tr.subparam-row
          td tapHoldDelay
          td number
          td 750
          td Determines how long (in ms) the user must hold their tap before the taphold event is fired on the target element
        tr.subparam-row
          td tapHoldPreventClicks
          td boolean
          td true
          td When enabled (by default), then click event will not be fired after tap hold event
        tr.subparam-row
          td activeState
          td boolean
          td true
          td When enabled, app will add "active-state" class to currently touched (:active) element.
        tr.subparam-row
          td activeStateElements
          td string
          td a, button, label, span, .actions-button, .stepper-button, .stepper-button-plus, .stepper-button-minus, .card-expandable, .menu-item, .link, .item-link, .accordion-item-toggle
          td CSS selector of elements where enabled `activeState` will add appropriate active class
        tr.subparam-row
          td activeStateOnMouseMove
          td boolean
          td false
          td When enabled it keeps "active state" on mouse move
        tr.subparam-row
          td iosTouchRipple
          td boolean
          td false
          td Enables touch ripple effect for iOS theme
        tr.subparam-row
          td mdTouchRipple
          td boolean
          td true
          td Enables touch ripple effect for MD theme
        tr.subparam-row
          td auroraTouchRipple
          td boolean
          td false
          td Enables touch ripple effect for Aurora theme
        tr.subparam-row
          td touchRippleElements
          td string
          td .ripple, .link, .item-link, .list-button, .links-list a, .button, button, .input-clear-button, .dialog-button, .tab-link, .item-radio, .item-checkbox, .actions-button, .searchbar-disable-button, .fab a, .checkbox, .radio, .data-table .sortable-cell:not(.input-cell), .notification-close-button, .stepper-button, .stepper-button-minus, .stepper-button-plus, .menu-item-content, .list.accordion-list .accordion-item-toggle
          td CSS selector of elements to apply touch ripple effect on click
        tr.subparam-row
          td touchRippleInsetElements
          td string
          td .ripple-inset, .icon-only, .searchbar-disable-button, .input-clear-button, .notification-close-button, .md .navbar .link.back
          td CSS selector of elements to apply inset touch ripple effect on click
        tr.subparam-close-row
          td(colspan="4") }
        tr
          td serviceWorker
          td object
          td
          td Object with service worker module parameters:
            :code(lang="js")
              var app = new Framework7({
                serviceWorker: {
                  path: './service-worker.js',
                  scope: '/',
                }
              })
        tr.subparam-open-row
          td(colspan="4") {
        tr.subparam-row
          td path
          td string
          td
          td Path to service worker file
        tr.subparam-row
          td scope
          td string
          td
          td Path to service worker scope
        tr.subparam-close-row
          td(colspan="4") }
    p These are default app parameters for app core module.
    p Most of components that has JavaScript API may extend this list of parameters with the property named as component. For example <a href="panel.html">Panel</a> component extends app parameters with `panel` property that accepts Panel specific parameters.
    p Example:
    :code(lang="js")
          var app = new Framework7({
            id: 'com.myapp.test',
            // Extended by Panel component:
            panel: {
              swipe: true,
              visibleBreakpoint: 1024,
            },
            // Extended by Dialog component:
            dialog: {
              title: 'My App',
            },
            // Extended by Statusbar component:
            statusbar: {
              iosOverlaysWebview: true,
            },
          });
    h2 App Methods & Properties
    p Returned Framework7 instance `app` contains a lot of useful properties and methods:
    table.methods-table
      tbody
        tr
          th(colspan="2") Properties
        tr
          td app.id
          td App ID passed in parameters
        tr
          td app.name
          td App name passed in parameters
        tr
          td app.version
          td App version
        tr
          td app.routes
          td App routes
        tr
          td app.language
          td App language
        tr
          td app.el
          td App root HTML element
        tr
          td app.$el
          td Dom7 instance with app root HTML element
        tr
          td app.rtl
          td Boolean property indicating app is in RTL layout or not
        tr
          td app.theme
          td String with current app theme. Can be `md`, `ios` or `aurora`
        tr
          td app.darkTheme
          td Boolean property that indicates whether the dark theme active or not. This property has effect only when `autoDarkTheme` enabled.
        tr
          td app.width
          td App width in px
        tr
          td app.height
          td App height in px
        tr
          td app.left
          td App left offset in px
        tr
          td app.top
          td App top offset in px
        tr
          td app.initialized
          td Boolean property indicating app is initialized or not
        tr
          td app.$
          td Dom7 alias
        tr
          td app.params
          td App parameters
        tr
          td app.support
          td Object with properties about supported features. Check the <a href="support.html">Support</a> utilities section
        tr
          td app.device
          td Object with properties about device. Check the <a href="device.html">Device</a> utilities section
        tr
          td app.utils
          td Object with some useful utilities. Check the <a href="utils.html">Utils</a> section
        tr
          td app.request
          td Contains methods to work with XHR requests. Check the <a href="request.html">Request</a> utilities section
        tr
          td app.serviceWorker.registration
          td Array with registered service workers
        tr
          td app.online
          td Boolean property indication app connection state. (`true` if online)
        tr
          th(colspan="2") Methods
        tr
          td app.enableAutoDarkTheme()
          td Enables auto dark theme detection
        tr
          td app.disableAutoDarkTheme()
          td Disables auto dark theme detection
        tr
          td app.on(<span>event</span>, <span>handler</span>)
          td Add event handler
        tr
          td app.once(<span>event</span>, <span>handler</span>)
          td Add event handler that will be removed after it was fired
        tr
          td app.off(<span>event</span>, <span>handler</span>)
          td Remove event handler
        tr
          td app.off(<span>event</span>)
          td Remove all handlers for specified event
        tr
          td app.emit(<span>event</span>, <span>...args</span>)
          td Fire event on instance
        tr
          td app.init()
          td Initialize app. In case you disabled auto initialization with `init: false` parameter
        tr
          td app.serviceWorker.register(<span>path</span>, <span>scope</span>)
          td Register service worker. It returns promise that will be resolved with #[a(href="https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerRegistration", target="_blank") ServiceWorkerRegistration]
        tr
          td app.serviceWorker.unregister(<span>registration</span>)
          td Unregister service worker. It returns promise that will be resolved when service worker unregistered.
    p Same as with app parameters most of components that has JavaScript API may extend this list of properties with the property named as component. For example Panel component extends app instance properties with `panel` property that accepts Panel specific properties and methods.
    p Example:
    :code(lang="js")
      // Open panel
      app.panel.open('left');

      // Hide statusbar
      app.statusbar.hide();
    h2 App Events
    p App instance emits the following core events:
    table.events-table
      thead
        tr
          th Event
          th Arguments
          th Description
      tbody
        tr
          td init
          td
          td Event will be fired on app initialization. Automatically after `new Framework7()` or after `app.init()` if you disabled auto init.
        tr
          td resize
          td
          td Event will be fired on app resize (window resize).
        tr
          td orientationchange
          td
          td Event will be fired on app orientation change (window orientantion change).
        tr
          td click
          td <span>(event)</span>
          td Event will be fired on app click
        tr
          td touchstart:active
          td <span>(event)</span>
          td Event will be fired on touch start (mousedown) event added as active listener (possible to prevent default)
        tr
          td touchmove:active
          td <span>(event)</span>
          td Event will be fired on touch move (mousemove) event added as active listener (possible to prevent default)
        tr
          td touchend:active
          td <span>(event)</span>
          td Event will be fired on touch end (mouseup) event added as active listener (possible to prevent default)
        tr
          td touchstart:passive
          td <span>(event)</span>
          td Event will be fired on touch start (mousedown) event added as passive listener (impossible to prevent default)
        tr
          td touchmove:passive
          td <span>(event)</span>
          td Event will be fired on touch move (mousemove) event added as passive listener (impossible to prevent default)
        tr
          td touchend:passive
          td <span>(event)</span>
          td Event will be fired on touch end (mouseup) event added as passive listener (impossible to prevent default)
        tr
          td serviceWorkerRegisterSuccess
          td <span>(registration)</span>
          td Event will be triggered when service worker successfully registered
        tr
          td serviceWorkerRegisterError
          td <span>(error)</span>
          td Event will be triggered when service worker registration failed
        tr
          td serviceWorkerUnregisterSuccess
          td <span>(registration)</span>
          td Event will be triggered when service worker successfully unregistered
        tr
          td serviceWorkerUnregisterError
          td <span>(registration, error)</span>
          td Event will be triggered when service worker unregister failed
        tr
          td online
          td
          td Event will be fired when app goes online
        tr
          td offline
          td
          td Event will be fired when app goes offline
        tr
          td connection
          td <span>(isOnline)</span>
          td Event will be fired on network state change
        tr
          td darkThemeChange
          td <span>(isDarkTheme)</span>
          td Event will be fired on device preferred color scheme change. It has effect only when `autoDarkTheme` enabled
    p And again, most of components that has JavaScript API may extend this list of events like Panel component will also trigger additional events on app instance.
    p Examples:
    :code(lang="js")
      app.on('panelOpen', function (panel) {
        console.log('Panel ' + panel.side + ' opened');
      });

      app.on('connection', function (isOnline) {
        if (isOnline) {
          console.log('app is online now')
        } else {
          console.log('app is offline now')
        }
      });

      app.on('darkThemeChange', function (isDark) {
        if (isDark) {
          console.log('color scheme changed to Dark')
        } else {
          console.log('color scheme changed to Light')
        }
      });

    h2 CSS Variables
    :code(lang="css")
      :root {
        --f7-theme-color: #007aff;
        --f7-theme-color-rgb: 0, 122, 255;
        --f7-theme-color-shade: #0066d6;
        --f7-theme-color-tint: #298fff;
        --f7-safe-area-left: 0px;
        --f7-safe-area-right: 0px;
        --f7-safe-area-top: 0px;
        --f7-safe-area-bottom: 0px;
        --f7-safe-area-outer-left: 0px;
        --f7-safe-area-outer-right: 0px;
        --f7-device-pixel-ratio: 1;
      }
      @supports (left: env(safe-area-inset-left)) {
        :root {
          --f7-safe-area-top: env(safe-area-inset-top);
          --f7-safe-area-bottom: env(safe-area-inset-bottom);
        }
        :root .ios-left-edge,
        :root .ios-edges,
        :root .safe-area-left,
        :root .safe-areas,
        :root .popup,
        :root .sheet-modal,
        :root .panel-left {
          --f7-safe-area-left: env(safe-area-inset-left);
          --f7-safe-area-outer-left: env(safe-area-inset-left);
        }
        :root .ios-right-edge,
        :root .ios-edges,
        :root .safe-area-right,
        :root .safe-areas,
        :root .popup,
        :root .sheet-modal,
        :root .panel-right {
          --f7-safe-area-right: env(safe-area-inset-right);
          --f7-safe-area-outer-right: env(safe-area-inset-right);
        }
        :root .no-safe-areas,
        :root .no-safe-area-left,
        :root .no-ios-edges,
        :root .no-ios-left-edge {
          --f7-safe-area-left: 0px;
          --f7-safe-area-outer-left: 0px;
        }
        :root .no-safe-areas,
        :root .no-safe-area-right,
        :root .no-ios-edges,
        :root .no-ios-right-edge {
          --f7-safe-area-right: 0px;
          --f7-safe-area-outer-right: 0px;
        }
      }
      @media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 2dppx) {
        :root {
          --f7-device-pixel-ratio: 2;
        }
      }
      @media (-webkit-min-device-pixel-ratio: 3), (min-resolution: 3dppx) {
        :root {
          --f7-device-pixel-ratio: 3;
        }
      }
      /*====================
        Fonts & Bars
        ==================== */
      :root {
        --f7-font-size: 14px;
        /*
        --f7-bars-link-color: var(--f7-theme-color);
        */
        --f7-bars-bg-image: none;
        --f7-bars-translucent-opacity: 0.8;
        --f7-bars-translucent-blur: 20px;
        --f7-bars-shadow-bottom-image: linear-gradient(to bottom, rgba(0, 0, 0, 0.25) 0%, rgba(0, 0, 0, 0.08) 40%, rgba(0, 0, 0, 0.04) 50%, rgba(0, 0, 0, 0) 90%, rgba(0, 0, 0, 0) 100%);
        --f7-bars-shadow-top-image: linear-gradient(to top, rgba(0, 0, 0, 0.25) 0%, rgba(0, 0, 0, 0.08) 40%, rgba(0, 0, 0, 0.04) 50%, rgba(0, 0, 0, 0) 90%, rgba(0, 0, 0, 0) 100%);
        --f7-bars-text-color: #000;
        --f7-bars-bg-color: #f7f7f8;
        --f7-bars-bg-color-rgb: 247, 247, 248;
      }
      :root .theme-dark,
      :root.theme-dark {
        --f7-bars-text-color: #fff;
      }
      .ios {
        --f7-font-family: -apple-system, SF Pro Text, SF UI Text, system-ui, Helvetica Neue, Helvetica, Arial, sans-serif;
        --f7-line-height: 1.4;
        --f7-text-color: #000;
        --f7-bars-border-color: rgba(0, 0, 0, 0.25);
      }
      .ios .theme-dark,
      .ios.theme-dark {
        --f7-text-color: #fff;
        --f7-bars-bg-color: #121212;
        --f7-bars-bg-color-rgb: 19, 19, 19;
        --f7-bars-border-color: rgba(255, 255, 255, 0.1);
      }
      .md {
        --f7-font-family: Roboto, system-ui, Noto, Helvetica, Arial, sans-serif;
        --f7-line-height: 1.5;
        --f7-bars-border-color: transparent;
        --f7-text-color: #212121;
      }
      .md .theme-dark,
      .md.theme-dark {
        --f7-text-color: rgba(255, 255, 255, 0.87);
        --f7-bars-bg-color: #202020;
      }
      .aurora {
        --f7-font-family: -apple-system, system-ui, Helvetica, Arial, sans-serif;
        --f7-line-height: 1.5;
        --f7-text-color: #000;
        --f7-bars-border-color: rgba(0, 0, 0, 0.2);
      }
      .aurora .theme-dark,
      .aurora.theme-dark {
        --f7-text-color: #fff;
        --f7-bars-bg-color: #202020;
        --f7-bars-border-color: rgba(255, 255, 255, 0.1);
      }
