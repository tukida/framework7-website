extends ../_docs-template

block vars
  - var title = 'Page | Framework7 Documentation';

block content
  include ../_docs-demo-device

  .docs-nav
    include ../_docs-menu
  .docs-content
    +improveDocsLink
    h1 Page
    ul.docs-index
    p Page is one of the main components (containers) used to display app content.
    h2 Page Layout
    :code(lang="html")
          <div class="page" data-name="home">
            <div class="page-content">
              ... scrollable page content goes here ...
            </div>
          </div>
    h3 Page Name
    p As you may note, each page has a `data-name` attribute with a unique page name. It's not required but can be useful within "page events" or "page callbacks". It can help us to define which page is loaded and available so you can make required manipulations to the page.
    h3 Page Content
    p All visual content (like list views, forms, etc.) should put inside of `<div class="page-content">` which should be a child of `<div class="page">`. It's required for correct styling, layout and scrolling.
    h2 Page Events
    p Now lets look at one of the most important parts of page navigation, "page events". <b>Page Events</b> allow us to manipulate just loaded pages by executing JavaScript for those specific pages:
    table.events-table
      thead
        tr
          th Event
          th Target
          th Description
      tbody
        tr
          td page:mounted
          td Page Element<span>&lt;div class="page"&gt;</span>
          td Event will be triggered when new page just inserted to DOM. Or when page with `keepAlive` route is mounted/attached to DOM
        tr
          td page:init
          td Page Element<span>&lt;div class="page"&gt;</span>
          td Event will be triggered after Framework7 initialize required page's components and navbar
        tr
          td page:reinit
          td Page Element<span>&lt;div class="page"&gt;</span>
          td This event will be triggered in case of navigating to the page that was already initialized.
        tr
          td page:beforein
          td Page Element<span>&lt;div class="page"&gt;</span>
          td Event will be triggered when everything initialized and page is ready to be transitioned into view (into active/current position)
        tr
          td page:afterin
          td Page Element<span>&lt;div class="page"&gt;</span>
          td Event will be triggered after page transitioned into view
        tr
          td page:beforeout
          td Page Element<span>&lt;div class="page"&gt;</span>
          td Event will be triggered right before page is going to be transitioned out of view
        tr
          td page:afterout
          td Page Element<span>&lt;div class="page"&gt;</span>
          td Event will be triggered after page transitioned out of view
        tr
          td page:beforeunmount
          td Page Element<span>&lt;div class="page"&gt;</span>
          td Event will be triggered when page with `keepAlive` route is going to be unmounted/detached from DOM
        tr
          td page:beforeremove
          td Page Element<span>&lt;div class="page"&gt;</span>
          td Event will be triggered right before Page will be removed from DOM. This event could be very useful if you need to detach some events / destroy some plugins to free memory. This event won't be triggered for `keepAlive` routes.
        tr
          td page:tabshow
          td Page Element<span>&lt;div class="page"&gt;</span>
          td Event will be triggered when page's parent <a href="tabs.html#views-as-tabs">View as Tab</a> becomes visible
        tr
          td page:tabhide
          td Page Element<span>&lt;div class="page"&gt;</span>
          td Event will be triggered when page's parent <a href="tabs.html#views-as-tabs">View as Tab</a> becomes hidden
    p Lets see how we can use these events. There are two ways to add page event handlers:
    :code(lang="js")
          // Option 1. Using one 'page:init' handler for all pages
          $$(document).on('page:init', function (e) {
            // Do something here when page loaded and initialized
          })

          // Option 2. Using live 'page:init' event handlers for each page
          $$(document).on('page:init', '.page[data-name="about"]', function (e) {
            // Do something here when page with data-name="about" attribute loaded and initialized
          })
    h2 Page Loading Sequence Classes
    p When a new page is loading and transitioned into the view (main visible part of the app) it has different classes on page element.
    p When we load/open new page the following happens:
    ol
      li Currently active page has `page-current` class.
      li If page we load not in DOM (e.g. loaded via Ajax or using template or from component) it will be added to DOM.
      li Page that we load/open will have additional `page-next` class set on its element.
      li Router element (`<div class="view">`) will have additional `router-transition-forward` class that does the following:
        ul
          li page with `page-next` (new page) class moves into the view
          li page with `page-current` (current page) class moves out of the view
      li After transition completed, the new page that we loaded will have `page-current` class
      li And the page that was previously active will have `page-previous` class
    p When we load/open previous page (go back) the following happens:
    ol
      li Currently active page has `page-current` class.
      li If page we go back to not in DOM (e.g. loaded via Ajax or using template or from component) it will be added to DOM.
      li Page that we go back to will have additional `page-previous` class set on its element.
      li Router element (`<div class="view">`) will have additional `router-transition-backward` class that does the following:
        ul
          li page with `page-previous` (page that we go back to) class moves into the view
          li page with `page-current` (current page) class moves out of the view
      li After transition completed, the new page that we returned to will have `page-current` class
      li And the page that was previously active will have `page-next` class. In case this page was added to DOM dynamically, it will be removed from DOM.

    h2 Page Data
    p As you may see it is pretty easy, but how do you determine which page is loaded when we use only one handler? For this case we have Page Data in the event details:
    :code(lang="js")
          // In page events:
          $$(document).on('page:init', function (e) {
            // Page Data contains all required information about loaded and initialized page
            var page = e.detail;
          })
    p Or in case the event handler was assigned using Dom7 like in example above then it will be passed in second argument:
    :code(lang="js")
          // In page events:
          $$(document).on('page:init', function (e, page) {
            console.log(page);
          })
    p Now, in the example above we have page data in `page` variable. It is an object with the following properties:
    table.methods-table
      thead
        tr
          td(colspan="3")
      tbody
        tr
          td page.app
          td <span class="parameter-type">object</span>
          td Initialized app instance
        tr
          td page.view
          td <span class="parameter-type">object</span>
          td View instance that contains this page (if this View was initialized)
        tr
          td page.router
          td <span class="parameter-type">object</span>
          td Router instance that contains this page (if this View was initialized). Same as `page.view.router`
        tr
          td page.name
          td <span class="parameter-type">string</span>
          td Value of page's `data-name` attribute
        tr
          td page.el
          td <span class="parameter-type">HTMLElement</span>
          td Page element
        tr
          td page.$el
          td <span class="parameter-type">object</span>
          td Dom7 instance with Page element
        tr
          td page.from
          td <span class="parameter-type">string</span>
          td Page position before transition or direction of where this Page comes from. It will be `next` if you load new page, `previous` - if you go back to this page, or `current` if this page replaces the currently active one.
        tr
          td page.to
          td <span class="parameter-type">string</span>
          td New page position or where this page goes to. Can be same `next`, `previous` or `current`
        tr
          td page.position
          td <span class="parameter-type">string</span>
          td Alias for `page.from`
        tr
          td page.direction
          td <span class="parameter-type">string</span>
          td Direction of page transition (if applicable). Can be `forward` or `backward`
        tr
          td page.route
          td <span class="parameter-type">object</span>
          td Route associated with this page, object with current route data that was used to load this page. It has the following properties
            ul
              li `url` - route URL
              li `path` - route path
              li `query` - object with route query. If the url is `/page/?id=5&foo=bar` then it will contain the following object `{id: '5', foo: 'bar'}`
              li `params` - route params. If we have matching route with `/page/user/:userId/post/:postId/` path and url of the page is `/page/user/55/post/12/` then it will be the following object `{userId: '55', postId: '12'}`
              li `name` - route name
              li `hash` - route URL hash
              li `route` - object with matching route from available routes
              li `context` - context that was passed to the route
        tr
          td page.pageFrom
          td <span class="parameter-type">object</span>
          td Page data of the page that was currently active before this new page.

    h2 Access To Page Data
    p If you don't use page events/callbacks and need to access to page data, it is possible via the `f7Page` property on its HTMLElement:
    :code(lang="js")
          var $$ = Dom7;

          var page = $$('.page[data-name="somepage"]')[0].f7Page;

          // do something with page data

    +cssVars('page')

