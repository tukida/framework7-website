extends ../_docs-template

block vars
  - var title = 'Pie Chart | Framework7 Documentation';

block content
  include ../_docs-demo-device

  .docs-nav
    include ../_docs-menu
  .docs-content
    +improveDocsLink
    h1 Pie Chart
    ul.docs-index
    p Framework7 comes with simple Pie Chart component. It produces nice looking fully responsive SVG charts.
    h2 Pie Chart Layout
    p Because Pie Chart SVG is generated by JavaScript its HTML layout is as simple as possible:
    :code(lang="html")
      <!-- Pie chart element -->
      <div class="pie-chart"></div>
    h2 Pie Chart App Methods
    p Now we need to create/initialize the Pie Chart. Let's look at related App methods to work with it:
    .method-wrap
      p
        span.method app.pieChart.create(<span>parameters</span>)
        | - create Pie Chart instance
      ul.method-parameters
        li
          span.parameter parameters
          |  - <span class="parameter-type">object</span>. Object with Pie Chart parameters
      p.method-returns Method returns created Pie Chart's instance

    .method-wrap
      p
        span.method app.pieChart.destroy(<span>el</span>)
        | - destroy Pie Chart instance
      ul.method-parameters
        li
          span.parameter el
          |  - <span class="parameter-type">HTMLElement</span> or <span class="parameter-type">string</span> (with CSS Selector) or <span class="parameter-type">object</span>. Pie Chart element or Pie Chart instance to destroy.
    .method-wrap
      p
        span.method app.pieChart.get(<span>el</span>)
        | - get Pie Chart instance by HTML element
      ul.method-parameters
        li
          span.parameter el
          |  - <span class="parameter-type">HTMLElement</span> or <span class="parameter-type">string</span> (with CSS Selector). Pie Chart element.
      p.method-returns Method returns Pie Chart's instance
    .method-wrap
      p
        span.method app.pieChart.update(<span>parameters</span>)
        | - update/rerender Pie Chart SVG according to passed parameters
      ul.method-parameters
        li
          span.parameter parameters
          |  - <span class="parameter-type">object</span>. Object with Pie Chart parameters
      p.method-returns Method returns Pie Chart's instance
    h2 Pie Chart Parameters
    p Now let's look at list of available parameters we need to create Pie Chart:
    table.params-table
      thead
        tr
          th Parameter
          th Type
          th Default
          th Description
      tbody
        tr
          td el
          td HTMLElement<br>string
          td
          td Pie Chart element. HTMLElement or string with CSS selector of Pie Chart element. Generated SVG will be inserted into this element
        tr
          td datasets
          td array
          td []
          td Chart data sets. Each object in `datasets` array has the following properties:
            ```js
              /** Dataset value */
              value: number;
              /** Dataset HEX color */
              color?: string;
              /** Dataset label */
              label?: string;
            ```
        tr
          td size
          td number
          td 320
          td Generated SVG image size (in px)
        tr
          td tooltip
          td boolean
          td false
          td Enables tooltip on hover
        tr
          td datasets
          td array
          td []
          td Chart data sets. Each object in `datasets` array has the following properties:
            ```js
              /** Dataset value */
              value: number;
              /** Dataset HEX color */
              color?: string;
              /** Dataset label */
              label?: string;
            ```
        tr
          td formatTooltip
          td function(data)
          td
          td Custom render function that must return tooltip's HTML content. Received `data` object has the following properties:
            ```js
              index: number;
              value: number;
              label: string;
              color: string;
              percentage: number;
            ```
        tr
          td on
          td object
          td
          td
            p Object with events handlers. For example:
            :code(lang="js")
              var pieChart = app.pieChart.create({
                el: '.pie-chart',
                on: {
                  beforeDestroy: function () {
                    console.log('Pie Chart will be destroyed')
                  }
                }
              })

    h2 Pie Chart Methods & Properties
    p So to create Pie Chart we have to call:
    :code(lang="js")
      var pieChart = app.pieChart.create({ /* parameters */ })
    p After that we have its initialized instance (like `pieChart` variable in example above) with useful methods and properties:
    table.methods-table
      tbody
        tr
          th(colspan="2") Properties
        tr
          td pieChart.app
          td Link to global app instance
        tr
          td pieChart.el
          td Pie Chart HTML element
        tr
          td pieChart.$el
          td Dom7 instance with Pie Chart HTML element
        tr
          td pieChart.svgEl
          td Pie Chart generated SVG HTML element
        tr
          td pieChart.$svgEl
          td Dom7 instance with generated SVG HTML element
        tr
          td pieChart.params
          td Pie Chart parameters
        tr
          th(colspan="2") Methods
        tr
          td pieChart.update(<span>parameters</span>)
          td Update/rerender Pie Chart SVG element according to passed parameters. It accepts object with same parameters required for Pie Chart initialization. You can pass only parameters that needs to be updated, e.g.
            :code(lang="js")
              var pieChart = app.pieChart.create({
                datasets: datasetsA,
                // ...
              });

              // and when we need to update rendered SVG based on new datasets:
              pieChart.update({
                datasets: datasetsB,
              });
        tr
          td pieChart.destroy()
          td Destroys Pie Chart instance
        tr
          td pieChart.on(<span>event</span>, <span>handler</span>)
          td Add event handler
        tr
          td pieChart.once(<span>event</span>, <span>handler</span>)
          td Add event handler that will be removed after it was fired
        tr
          td pieChart.off(<span>event</span>, <span>handler</span>)
          td Remove event handler
        tr
          td pieChart.off(<span>event</span>)
          td Remove all handlers for specified event
        tr
          td pieChart.emit(<span>event</span>, <span>...args</span>)
          td Fire event on instance

    h2 Pie Chart Events
    p Pie Chart will fire the following DOM events on Pie Chart element and events on app and Pie Chart instance:
    h3 DOM Events
    table.events-table
      thead
        tr
          th Event
          th Target
          th Description
      tbody
        tr
          td piechart:select
          td Pie Chart Element<span>&lt;div class="pie-chart"&gt;</span>
          td Event will be triggered (when tooltip enabled) on chart hover
        tr
          td piechart:beforedestroy
          td Pie Chart Element<span>&lt;div class="pie-chart"&gt;</span>
          td Event will be triggered right before Pie Chart instance will be destroyed
    h3 App and Pie Chart Instance Events
    p Pie Chart instance emits events on both self instance and app instance. App instance events has same names prefixed with `pieChart`.
    table.events-table.double-events-table
      thead
        tr
          th Event
          th Arguments
          th Target
          th Description
      tbody
        tr
          td select
          td <span>(pieChart, index, dataset)</span>
          td pieChart
          td(rowspan="2") Event will be triggered (when tooltip enabled) on chart hover
        tr
          td pieChartSelect
          td <span>(pieChart, index, dataset)</span>
          td app
        tr
          td beforeDestroy
          td <span>(pieChart)</span>
          td pieChart
          td(rowspan="2") Event will be triggered right before Pie Chart instance will be destroyed. As an argument event handler receives Pie Chart instance
        tr
          td pieChartBeforeDestroy
          td <span>(pieChart)</span>
          td app

    +cssVars('pie-chart')

    .with-device
      h2(data-device-preview="../docs-demos/core/pie-chart.html") Examples
      include:coreSource ../docs-demos/core/pie-chart.f7.html
