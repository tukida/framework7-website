extends ../_docs-template

block vars
  - var title = 'Inputs / Form Inputs | Framework7 Documentation';

block content
  include ../_docs-demo-device

  .docs-nav
    include ../_docs-menu
  .docs-content
    +improveDocsLink
    h1 Inputs / Form Inputs
    ul.docs-index
    p Form inputs allow you to create flexible and beautiful Form layouts.
    h2 Inputs Layout
    p It is recommended to use inputs with <a href="list-view.html">List View</a>:
    :code(lang="html")
      <div class="list">
        <ul>
          ...
          <li class="item-content item-input">
            <div class="item-media">... icon/image here ...</div>
            <div class="item-inner">
              <div class="item-input-wrap">
                <input type="text" name="name">
                <span class="input-clear-button"></span>
              </div>
            </div>
          </li>
          ...
        </ul>
      </div>
    p Where:
    ul
      li
        p `item-input` - required additional class on `item-content`. Required for correct input item layout
      li
        p `item-label` - additional class on `item-title` required to display label correctly
      li
        p `item-input-wrap` - required additional input wrapper. Must be a direct child of `item-inner`
      li
        p `<span class="input-clear-button">` - button that will clear input value in click. <em>Optional</em>
    h3 Stacked Labels
    p By default inputs list is displayed with stacked labels. Stacked labels always appear on top of the input:
    :code(lang="html")
      <div class="list">
        <ul>
          ...
          <li class="item-content item-input">
            <div class="item-media">... icon/image here ...</div>
            <div class="item-inner">
              <div class="item-title item-label">Name</div>
              <div class="item-input-wrap">
                <input type="text" name="name">
                <span class="input-clear-button"></span>
              </div>
            </div>
          </li>
          ...
        </ul>
      </div>
    p Where:
    ul
      li
        p `item-title item-label` - input label
    h3 Inline Labels
    p If you want to use inline labels then you can additional `inline-labels` class to the whole list or `inline-label` class to the single item:
    :code(lang="html")
      <div class="list inline-labels">
        <ul>
          ...
          <li class="item-content item-input">
            <div class="item-media">... icon/image here ...</div>
            <div class="item-inner">
              <div class="item-title item-label">Name</div>
              <div class="item-input-wrap">
                <input type="text" name="name">
                <span class="input-clear-button"></span>
              </div>
            </div>
          </li>
          ...
        </ul>
      </div>
      <!-- or just to single item -->
      <div class="list">
        <ul>
          ...
          <!-- additional "inline-label" class -->
          <li class="item-content item-input inline-label">
            ...
          </li>
          ...
        </ul>
      </div>
    h3 Floating Labels
    p To add floating label, we need to use `item-floating-label` class instead of item-label.
    :code(lang="html")
      <div class="list">
        <ul>
          ...
          <li class="item-content item-input">
            <div class="item-media">... icon/image here ...</div>
            <div class="item-inner">
              <!-- "item-floating-label" class on item title -->
              <div class="item-title item-floating-label">Name</div>
              <div class="item-input-wrap">
                <input type="text" name="name">
                <span class="input-clear-button"></span>
              </div>
            </div>
          </li>
          ...
        </ul>
      </div>
    h3 Outline Inputs
    p To make input "outline" (with border around input) we need to add `item-input-outline` class to main list input element:
    :code(lang="html")
      <div class="list">
        <ul>
          ...
          <!-- additional "item-input-outline" class -->
          <li class="item-content item-input item-input-outline">
            <div class="item-inner">
              <div class="item-title item-label">Name</div>
              <div class="item-input-wrap">
                <input type="text" name="name">
                <span class="input-clear-button"></span>
              </div>
            </div>
          </li>
          ...
        </ul>
      </div>


    h3 Item Info
    p It is also possible to additional information about form input:
    :code(lang="html")
      <div class="list">
        <ul>
          ...
          <!-- additional "item-input-with-info" class on item -->
          <li class="item-content item-input item-input-with-info">
            <div class="item-media">... icon/image here ...</div>
            <div class="item-inner">
              <div class="item-title item-label">Name</div>
              <div class="item-input-wrap">
                <input type="text" name="name">
                <span class="input-clear-button"></span>
                <!-- element with additional information -->
                <div class="item-input-info">Some information about input field</div>
              </div>
            </div>
          </li>
          ...
        </ul>
      </div>
    p Where:
    ul
      li
        p `item-input-with-info` - required additional class on input item
      li
        p `<div class="item-input-info">...&lt;/div&gt;` - element with additional information
    h3 Input Dropdown
    p It is also possible to indicate dropdown input (like select) with additional `input-dropdown-wrap` class. It will add small dropdown icon on the right (â–¼):
    :code
      <div class="list">
        <ul>
          ...
          <li class="item-content item-input">
            <div class="item-media">... icon/image here ...</div>
            <div class="item-inner">
              <div class="item-title item-label">Name</div>
              <!-- additional "input-dropdown-wrap" class -->
              <div class="item-input-wrap input-dropdown-wrap">
                <select>
                  ...
                </select>
              </div>
            </div>
          </li>
          ...
        </ul>
      </div>
    h2 Supported Inputs
    p Here is the list of input elements that you can put inside of `item-input-wrap`:
    table
      tbody
        tr
          td(valign="top")
            b All text inputs
          td Supported types: `text`, `password`, `email`, `tel`, `url`, `date`, `number`, `datetime-local`
            :code(lang="html")
              ...
                <div class="item-input-wrap">
                  <input type="text">
                </div>
              ...
              ...
                <div class="item-input-wrap">
                  <input type="email">
                </div>
              ...
        tr
          td(valign="top")
            b Select
          td
            :code(lang="html")
              ...
                <div class="item-input-wrap">
                  <select>...</select">
                </div>
              ...
        tr
          td(valign="top")
            b Textarea
          td
            :code(lang="html")
              ...
                <div class="item-input-wrap">
                  <textarea></textarea>
                </div>
              ...
        tr
          td(valign="top")
            b Range Slider
          td
            :code(lang="html")
              ...
                <div class="item-input-wrap">
                  <div class="range-slider">
                    <input type="range" min="0" max="100" step="0.1">
                  </div>
                </div>
              ...
    h2 Resizable Textarea
    p To make textarea automatically resize based on its content we may just add `resizable` class:
    :code(lang="html")
          <textarea class="resizable"></textarea>
    h2 Validation
    p Framework7 supports <a href="https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/Form_validation" target="_blank">HTML5 validation</a> based on `validity` input property. With enabled validation, there will appear validation error messages in case of input has invalid value.
    p To enable validation we must add: `required` and `validate` attributes to the input element.
    p If we need input validation #[b only] on `blur` event, then we need to add `data-validate-on-blur="true"` attribute.
    p Value validation depends on input `type`. For example `input type="email"` will be validated to match email pattern, etc. It is default browser behavior. In case you want to add custom rule to validate input value, then it must be done using `pattern` input attribute:
    :code(lang="html")
      <!-- default validation, check for value is not empty -->
      <input type="text" placeholder="Your name" required validate>

      <!-- default email validation, value must be email -->
      <input type="email" placeholder="Your e-mail" required validate>

      <!-- default url validation -->
      <input type="url" placeholder="Your URL" required validate>

      <!-- pattern validation, value must be "apple" or "banana" -->
      <input type="text" required validate pattern="apple|banana" placeholder="Type 'apple' or 'banana'" >

      <!-- pattern validation with custom error message, value must be numbers only -->
      <input type="text" placeholder="Enter number" required validate pattern="[0-9]*" data-error-message="Only numbers please!">

      <!-- this input will be validated only on blur -->
      <input type="text" placeholder="Your name" required validate data-validate-on-blur="true">

    h2 Input State Classes
    p There are several classes that can be added to input element depending on its state and content:
    ul
      li `input-with-value` - will be added to input when it has value
      li `input-focused` - will be added to input when it is focused
      li `input-invalid` - will be added to input when its value is not valid
    p Same states will be added to input's parent `item-input` element:
    ul
      li `item-input-with-value` - will be added to input item when its input has value
      li `item-input-focused` - will be added to input item when its input is focused
      li `item-input-invalid` - will be added to input item when its input's value is not valid

    h2 Input App Parameters
    p It is possible to control some default input behavior using global app parameters where we can pass input-related parameters under `input` property:
    table.params-table
      thead
        tr
          th Parameter
          th Type
          th Default
          th Description
      tbody
        tr
          td scrollIntoViewOnFocus
          td boolean
          td
          td When enabled will scroll input into view on input focus. By default it is enabled for android devices only, as it helps to solve issue when on-screen keyboard may overlap the input
        tr
          td scrollIntoViewCentered
          td boolean
          td false
          td Tweaks behavior of previous parameter to scroll input into the <b>center of view</b> on input focus
        tr
          td scrollIntoViewDuration
          td number
          td 0
          td Default duration for scrolling input into view
        tr
          td scrollIntoViewAlways
          td boolean
          td false
          td When enabled will scroll input into view no matter is it outside of view or not
    p For example:
    :code(lang="js")
      var app = new Framework7({
        input: {
          scrollIntoViewOnFocus: true,
          scrollIntoViewCentered: true,
        }
      });

    h2 Input App Methods
    p We can use following app methods available to control Inputs:
    table.methods-table
      tbody
        tr
          td app.input.scrollIntoView(<span>inputEl, duration, centered</span>, <span>force</span>)
          td Scroll input into view
            ul.method-parameters
              li <span class="parameter">inputEl</span> - <span class="parameter-type">HTMLElement</span> or <span class="parameter-type">string</span> (with CSS Selector) of required input element to get into view. Required
              li <span class="parameter">duration</span> - <span class="parameter-type">number</span> - scrolling duration in ms.
              li <span class="parameter">centered</span> - <span class="parameter-type">boolean</span> - defines whether it must be scrolled into the center of view or not.
              li <span class="parameter">force</span> - <span class="parameter-type">boolean</span> - scrolls input into view no matter is it outside of view or not.
        tr
          td app.input.focus(<span>inputEl</span>)
          td Will add additional required styles and classes on input like when it is focused
            ul.method-parameters
              li <span class="parameter">inputEl</span> - <span class="parameter-type">HTMLElement</span> or <span class="parameter-type">string</span> (with CSS Selector) of required input element. Required.
        tr
          td app.input.blur(<span>inputEl</span>)
          td Will remove additional required styles and classes on input like when it loses focus
            ul.method-parameters
              li <span class="parameter">inputEl</span> - <span class="parameter-type">HTMLElement</span> or <span class="parameter-type">string</span> (with CSS Selector) of required input element. Required.
        tr
          td app.input.resizeTextarea(<span>textareaEl</span>)
          td Force resizable textarea to resize depending on its content
            ul.method-parameters
              li <span class="parameter">textareaEl</span> - <span class="parameter-type">HTMLElement</span> or <span class="parameter-type">string</span> (with CSS Selector) of required textarea element. Required.
        tr
          td app.input.checkEmptyState(<span>inputEl</span>)
          td Recalculate required additional styles and classes on input element based on whether it has value or not
            ul.method-parameters
              li <span class="parameter">inputEl</span> - <span class="parameter-type">HTMLElement</span> or <span class="parameter-type">string</span> (with CSS Selector) of required textarea element. Required.
        tr
          td app.input.validate(<span>inputEl</span>)
          td Validate input
            ul.method-parameters
              li <span class="parameter">inputEl</span> - <span class="parameter-type">HTMLElement</span> or <span class="parameter-type">string</span> (with CSS Selector) of required textarea element. Required.
              li.method-returns Method returns `true` if input is valid, or `false` if input is not valid
        tr
          td app.input.validateInputs(<span>containerEl</span>)
          td Validate all inputs in passed container
            ul.method-parameters
              li <span class="parameter">containerEl</span> - <span class="parameter-type">HTMLElement</span> or <span class="parameter-type">string</span> (with CSS Selector) of required element with inputs inside to validate. Required.
              li.method-returns Method returns `true` if all child inputs are valid or `false` if at least one input is not valid

    h2 Input Events
    p Inputs will fire the following DOM events input elements:
    table.events-table
      thead
        tr
          th Event
          th Target
          th Description
      tbody
        tr
          td textarea:resize
          td Textarea Element<span>&lt;textarea class="resizable"&gt;</span>
          td Event will be triggered after resizable textarea resized. `event.detail` will contain object with the `initialHeight`, `currentHeight` and `scrollHeight` properties
        tr
          td input:notempty
          td Input Element<span>&lt;input/textarea&gt;</span>
          td Event will be triggered when input value becomes not empty
        tr
          td input:empty
          td Input Element<span>&lt;input/textarea&gt;</span>
          td Event will be triggered when input value becomes empty
        tr
          td input:clear
          td Input Element<span>&lt;input/textarea&gt;</span>
          td Event will be triggered after input value will be cleared by clicking on input clear button

    +cssVars('input')

    .with-device
      h2(data-device-preview="../docs-demos/core/inputs.html") Examples
      include:coreSource ../docs-demos/core/inputs.f7.html
