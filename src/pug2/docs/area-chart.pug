extends ../_docs-template

block vars
  - var title = 'Area Chart | Framework7 Documentation';

block content
  include ../_docs-demo-device

  .docs-nav
    include ../_docs-menu
  .docs-content
    +improveDocsLink
    h1 Area Chart
    ul.docs-index
    p Framework7 comes with simple Area Chart component. It produces nice looking fully responsive SVG charts.
    h2 Area Chart Layout
    p Because Area Chart SVG is generated by JavaScript its HTML layout is as simple as possible:
    :code(lang="html")
      <!-- Area Chart element -->
      <div class="area-chart"></div>
    h2 Area Chart App Methods
    p Now we need to create/initialize the Area Chart. Let's look at related App methods to work with it:
    .method-wrap
      p
        span.method app.areaChart.create(<span>parameters</span>)
        | - create Area Chart instance
      ul.method-parameters
        li
          span.parameter parameters
          |  - <span class="parameter-type">object</span>. Object with Area Chart parameters
      p.method-returns Method returns created Area Chart's instance

    .method-wrap
      p
        span.method app.areaChart.destroy(<span>el</span>)
        | - destroy Area Chart instance
      ul.method-parameters
        li
          span.parameter el
          |  - <span class="parameter-type">HTMLElement</span> or <span class="parameter-type">string</span> (with CSS Selector) or <span class="parameter-type">object</span>. Area Chart element or Area Chart instance to destroy.
    .method-wrap
      p
        span.method app.areaChart.get(<span>el</span>)
        | - get Area Chart instance by HTML element
      ul.method-parameters
        li
          span.parameter el
          |  - <span class="parameter-type">HTMLElement</span> or <span class="parameter-type">string</span> (with CSS Selector). Area Chart element.
      p.method-returns Method returns Area Chart's instance
    .method-wrap
      p
        span.method app.areaChart.update(<span>parameters</span>)
        | - update/rerender Area Chart SVG according to passed parameters
      ul.method-parameters
        li
          span.parameter parameters
          |  - <span class="parameter-type">object</span>. Object with Area Chart parameters
      p.method-returns Method returns Area Chart's instance
    h2 Area Chart Parameters
    p Now let's look at list of available parameters we need to create Area Chart:
    table.params-table
      thead
        tr
          th Parameter
          th Type
          th Default
          th Description
      tbody
        tr
          td el
          td HTMLElement<br>string
          td
          td Area Chart element. HTMLElement or string with CSS selector of Area Chart element. Generated SVG will be inserted into this element
        tr
          td width
          td number
          td 640
          td Generated SVG image width (in px)
        tr
          td height
          td number
          td 320
          td Generated SVG image height (in px)
        tr
          td datasets
          td array
          td []
          td Chart data sets. Each object in `datasets` array has the following properties:
            ```js
              /** Dataset value */
              values: number[];
              /** Dataset HEX color */
              color?: string;
              /** Dataset label */
              label?: string;
            ```
        tr
          td lineChart
          td boolean
          td false
          td Enables lines chart (instead of area chart)
        tr
          td axis
          td boolean
          td false
          td Enables chart horizontal (X) axis
        tr
          td axisLabels
          td array
          td []
          td Chart horizontal (X) axis labels. Should have same amount of items as dataset values
        tr
          td tooltip
          td boolean
          td false
          td Enables tooltip on hover
        tr
          td legend
          td boolean
          td false
          td Enables chart legend
        tr
          td toggleDatasets
          td boolean
          td false
          td When enabled it will toggle data sets on legend items click
        tr
          td maxAxisLabels
          td number
          td 8
          td Max numbers of axis labels (ticks) to be visible on axis
        tr
          td formatAxisLabel
          td function(label)
          td
          td Custom render function to format axis label text
        tr
          td formatLegendLabel
          td function(label)
          td
          td Custom render function to format legend label text
        tr
          td formatTooltip
          td function(data)
          td
          td Custom render function that must return tooltip's HTML content. Received `data` object has the following properties:
            ```js
              index: number;
              total: number;
              datasets: {
                color?: string;
                label: any;
                value: number;
              }
            ```
        tr
          td formatTooltipAxisLabel
          td function(label)
          td
          td Custom render function to format axis label text in Tooltip
        tr
          td formatTooltipTotal
          td function(total)
          td
          td Custom render function to format total value text in Tooltip
        tr
          td formatTooltipDataset
          td function(label, value, color)
          td
          td Custom render function to format dataset text in Tooltip
        tr
          td on
          td object
          td
          td
            p Object with events handlers. For example:
            :code(lang="js")
              var areaChart = app.areaChart.create({
                el: '.area-chart',
                on: {
                  beforeDestroy: function () {
                    console.log('Area Chart will be destroyed')
                  }
                }
              })

    h2 Area Chart Methods & Properties
    p So to create Area Chart we have to call:
    :code(lang="js")
      var areaChart = app.areaChart.create({ /* parameters */ })
    p After that we have its initialized instance (like `areaChart` variable in example above) with useful methods and properties:
    table.methods-table
      tbody
        tr
          th(colspan="2") Properties
        tr
          td areaChart.app
          td Link to global app instance
        tr
          td areaChart.el
          td Area Chart HTML element
        tr
          td areaChart.$el
          td Dom7 instance with Area Chart HTML element
        tr
          td areaChart.svgEl
          td Area Chart generated SVG HTML element
        tr
          td areaChart.$svgEl
          td Dom7 instance with generated SVG HTML element
        tr
          td areaChart.params
          td Area Chart parameters
        tr
          th(colspan="2") Methods
        tr
          td areaChart.update(<span>parameters</span>)
          td Update/rerender Area Chart SVG element according to passed parameters. It accepts object with same parameters required for Area Chart initialization. You can pass only parameters that needs to be updated, e.g.
            :code(lang="js")
              var areaChart = app.areaChart.create({
                datasets: datasetsA,
                // ...
              });

              // and when we need to update rendered SVG based on new datasets:
              areaChart.update({
                datasets: datasetsB,
              });
        tr
          td areaChart.destroy()
          td Destroys Area Chart instance
        tr
          td areaChart.on(<span>event</span>, <span>handler</span>)
          td Add event handler
        tr
          td areaChart.once(<span>event</span>, <span>handler</span>)
          td Add event handler that will be removed after it was fired
        tr
          td areaChart.off(<span>event</span>, <span>handler</span>)
          td Remove event handler
        tr
          td areaChart.off(<span>event</span>)
          td Remove all handlers for specified event
        tr
          td areaChart.emit(<span>event</span>, <span>...args</span>)
          td Fire event on instance

    h2 Area Chart Events
    p Area Chart will fire the following DOM events on Area Chart element and events on app and Area Chart instance:
    h3 DOM Events
    table.events-table
      thead
        tr
          th Event
          th Target
          th Description
      tbody
        tr
          td areachart:select
          td Area Chart Element<span>&lt;div class="area-chart"&gt;</span>
          td Event will be triggered (when tooltip enabled) on chart hover
        tr
          td areachart:beforedestroy
          td Area Chart Element<span>&lt;div class="area-chart"&gt;</span>
          td Event will be triggered right before Area Chart instance will be destroyed
    h3 App and Area Chart Instance Events
    p Area Chart instance emits events on both self instance and app instance. App instance events has same names prefixed with `areaChart`.
    table.events-table.double-events-table
      thead
        tr
          th Event
          th Arguments
          th Target
          th Description
      tbody
        tr
          td select
          td <span>(areaChart, index)</span>
          td areaChart
          td(rowspan="2") Event will be triggered (when tooltip enabled) on chart hover
        tr
          td areaChartSelect
          td <span>(areaChart, index)</span>
          td app
        tr
          td beforeDestroy
          td <span>(areaChart)</span>
          td areaChart
          td(rowspan="2") Event will be triggered right before Area Chart instance will be destroyed. As an argument event handler receives Area Chart instance
        tr
          td areaChartBeforeDestroy
          td <span>(areaChart)</span>
          td app

    +cssVars('area-chart')

    .with-device
      h2(data-device-preview="../docs-demos/core/area-chart.html") Examples
      include:coreSource ../docs-demos/core/area-chart.f7.html
