extends ../_docs-template

block vars
  - var title = 'Searchbar | Framework7 Documentation';

block content
  include ../_docs-demo-device

  .docs-nav
    include ../_docs-menu
  .docs-content
    +improveDocsLink
    h1 Searchbar
    ul.docs-index
    p Searchbar allows user to search through <a href="list-view.html">List View</a> elements. Or it can be used as a visual UI component for your custom search realization.
    h2 Searchbar Layout
    :code(lang="html")
          <div class="searchbar-backdrop"></div>
          <form class="searchbar">
            <div class="searchbar-inner">
              <div class="searchbar-input-wrap">
                <input type="search" placeholder="Search">
                <i class="searchbar-icon"></i>
                <span class="input-clear-button"></span>
              </div>
              <span class="searchbar-disable-button">Cancel</span>
            </div>
          </form>
    p Where:
    ul
      li `<div class="searchbar-input-wrap">` - wrapper for search field and clear button
        ul
          li `<input type="search">` - search field
          li `<i class="searchbar-icon">` - search icon
          li `<span class="input-clear-button">` - button to clear field value and reset search results. Optional element
      li `<span class="searchbar-disable-button">` - Searchbar "Cancel" button that will deactivate Searchbar, reset search results and clear search field. Optional element
      li `<div class="searchbar-backdrop">` - semi transparent searchbar backdrop that becomes visible when we enable searchbar. It is recommended to place this element inside of scrollable page's `page-content`
    h2 Searchbar Type
    p Now let's see where we can place Searchbar in page structure. There are few options:
    h3 Fixed Searchbar
    p Fixed Searchbar is always visible on screen not depending on page scroll. In this case it must be placed according to one of the following rules:
    ul
      li It can be a direct child of page and if page has also fixed Navbar and/or Toolbar then it must be AFTER Navbar and Toolbar:
        :code(lang="html")
          <div class="page">
            <div class="navbar">...</div>
            <div class="toolbar toolbar-bottom">...</div>
            <!-- Searchbar goes after Navbar and Toolbar -->
            <form class="searchbar">...</form>
            <div class="page-content">
              <!-- Searchbar backdrop layer -->
              <div class="searchbar-backdrop"></div>
              <!-- page content here -->
            </div>
          </div>
      li It can be placed inside of Subnavbar which is inside of the Navbar (recommended way):
        :code(lang="html")
              <div class="page page-with-subnavbar">
                <div class="navbar">
                  <div class="navbar-bg"></div>
                  <div class="navbar-inner">
                    ...
                    <div class="subnavbar">
                      <!-- Searchbar inside of Subnavbar -->
                      <form class="searchbar">...</form>
                    </div>
                  </div>
                </div>
                <div class="page-content">
                  <!-- Searchbar backdrop layer -->
                  <div class="searchbar-backdrop"></div>
                  <!-- page content here -->
                </div>
              </div>
    h3 Static Searchbar
    p In this case Searchbar is just part of the scrollable page content:
    :code(lang="html")
          <div class="page">
            <div class="navbar">...</div>
            <div class="page-content">
              <!-- Searchbar backdrop layer -->
              <div class="searchbar-backdrop"></div>
              <!-- Searchbar is part of scrollable page content -->
              <form class="searchbar">...</form>
              <!-- page content here -->
            </div>
          </div>
    h3 Expandable Searchbar
    p Expandable Searchbar is hidden when disabled and becomes visible when we enable it. Its layout is pretty strict, it must be placed inside of Navbar:
    :code(lang="html")
          <div class="page">
            <div class="navbar">
              <div class="navbar-bg"></div>
              <div class="navbar-inner">
                <div class="left">...</div>
                <div class="title">...</div>
                <div class="right">
                  <!-- Link to enable searchbar -->
                  <a class="link icon-only searchbar-enable" data-searchbar=".searchbar">
                    <i class="icon f7-icons if-not-md">search</i>
                    <i class="icon material-icons md-only">search</i>
                  </a>
                </div>
                <!-- Searchbar is a direct child of "navbar-inner" -->
                <form class="searchbar searchbar-expandable">
                  <div class="searchbar-inner">
                    <div class="searchbar-input-wrap">
                      <input type="search" placeholder="Search"/>
                      <i class="searchbar-icon"></i>
                      <span class="input-clear-button"></span>
                    </div>
                    <span class="searchbar-disable-button">Cancel</span>
                  </div>
                </form>
              </div>
            </div>
            <!-- Scrollable page content -->
            <div class="page-content">...</div>
          </div>

    p Where:
    ul
      li `<a class="link icon-only searchbar-enable" data-searchbar=".searchbar">` - link to enable/expand Searchbar. Optional or can be placed in any other place. `data-searchbar` attribute contains CSS selector of Searchbar to enable.
      li Searchbar has additional `searchbar-expandable` class. It is required for expandable Searchbar to work

    h3 Inline Searchbar
    p Inline Searchbar is designed to be used inside of other components, specifically inside of <a href="./appbar.html">Appbar</a>. It has simplified layout - without `.searchbar-inner`, and it is recommended to use it without disable button.
    p We just need to add `searchbar-inline` class to Searchbar to make it inline
    :code(lang="html")
      <!-- Additional "searchbar-inline" class -->
      <div class="searchbar searchbar-inline">
        <div class="searchbar-input-wrap">
          <input type="search" placeholder="Search">
          <i class="searchbar-icon"></i>
          <span class="input-clear-button"></span>
        </div>
      </div>

    h2 Searchbar Behavior Classes
    p There are also several CSS classes that can be added to elements that will define their behavior when Searchbar is active:
    ul
      li `searchbar-hide-on-enable` - elements with such class on page will be hidden when searchbar is enabled
      li `searchbar-hide-on-search` - elements with such class on page will be hidden during search
      li `searchbar-not-found` - elements with such class are hidden by default and become visible when there is not any search results
      li `searchbar-found` - elements with such class are visible by default and become hidden when there is not any search results
      li `searchbar-ignore` - searchbar will not consider this elements in search results
    p For example:
    :code(lang="html")
          <div class="page">
            <div class="navbar">...</div>
            <div class="page-content">
              <div class="searchbar-backdrop"></div>
              <form class="searchbar">...</form>

              <!-- Following block title and block will be hidden on search -->
              <div class="block-title searchbar-hide-on-search">Some block title</div>
              <div class="block">Lorem ipsum dolor sit amet...</div>

              <!-- We do search in super heroes list so the following title and list must be visible on search -->
              <div class="block-title searchbar-found">Super Heroes</div>
              <div class="list simple-list searchbar-found">
                <ul>
                  <li>Hulk</li>
                  <li>Batman</li>
                  <li>Superman</li>
                  ...
                </ul>
              </div>

              <!-- This list will be visible when there is not any search results -->
              <div class="list simple-list searchbar-not-found">
                <ul>
                  <li>Nothing found</li>
                </ul>
              </div>
            </div>
          </div>

    h2 Searchbar App Methods
    p Now, when we have Searchbar' HTML, we need to initialize it. We need to use related App's method:
    table.methods-table
      tbody
        tr
          td app.searchbar.create(<span>parameters</span>)
          td Initialize Searchbar with parameters
            ul.method-parameters
              li
                span.parameter parameters
                |  - <span class="parameter-type">object</span> - object with Searchbar parameters

              li.method-returns Method returns initialized Searchbar instance
        tr
          td app.searchbar.destroy(<span>el</span>)
          td Destroy Searchbar instance
            ul.method-parameters
              li
                span.parameter el
                |  - <span class="parameter-type">HTMLElement</span> or <span class="parameter-type">string</span> (with CSS Selector) or <span class="parameter-type">object</span>. Searchbar element or Searchbar instance to destroy.
        tr
          td app.searchbar.get(<span>el</span>)
          td Get Searchbar instance by HTML element
            ul.method-parameters
              li
                span.parameter el
                |  - <span class="parameter-type">HTMLElement</span> or <span class="parameter-type">string</span> (with CSS Selector). Searchbar element.
              li.method-returns Method returns Searchbar's instance
        tr
          td app.searchbar.clear(<span>el</span>)
          td Clear Searchbar text input
            ul.method-parameters
              li
                span.parameter el
                |  - <span class="parameter-type">HTMLElement</span> or <span class="parameter-type">string</span> (with CSS Selector). Searchbar element.
              li.method-returns Method returns Searchbar's instance
        tr
          td app.searchbar.enable(<span>el</span>)
          td Enable Searchbar
            ul.method-parameters
              li
                span.parameter el
                |  - <span class="parameter-type">HTMLElement</span> or <span class="parameter-type">string</span> (with CSS Selector). Searchbar element.
              li.method-returns Method returns Searchbar's instance
        tr
          td app.searchbar.disable(<span>el</span>)
          td Disable Searchbar
            ul.method-parameters
              li
                span.parameter el
                |  - <span class="parameter-type">HTMLElement</span> or <span class="parameter-type">string</span> (with CSS Selector). Searchbar element.
              li.method-returns Method returns Searchbar's instance
        tr
          td app.searchbar.toggle(<span>el</span>)
          td Toggle Searchbar: enable if it was disabled, or disable if it was enabled
            ul.method-parameters
              li
                span.parameter el
                |  - <span class="parameter-type">HTMLElement</span> or <span class="parameter-type">string</span> (with CSS Selector). Searchbar element.
              li.method-returns Method returns Searchbar's instance
        tr
          td app.searchbar.search(<span>el</span>, <span>query</span>)
          td Trigger searchbar to search `query`
            ul.method-parameters
              li
                span.parameter el
                |  - <span class="parameter-type">HTMLElement</span> or <span class="parameter-type">string</span> (with CSS Selector). Searchbar element.
              li
                span.parameter query
                |  - <span class="parameter-type">string</span>. Search query.
              li.method-returns Method returns Searchbar's instance
    h2 Searchbar Parameters
    p Let's look on list of all available parameters we need to create/init Searchbar:
    table.params-table
      thead
        tr
          th Parameter
          th Type
          th Default
          th Description
      tbody
        tr
          td el
          td string<br>HTMLElement
          td
          td CSS selector or HTML element of searchbar element (`form class="searchbar"`)
        tr
          td inputEl
          td string<br>HTMLElement
          td
          td CSS selector or HTML element of searchbar input element. By default (if not passed) will try to look for `input type="search"` inside of searchbar
        tr
          td disableButton
          td boolean
          td true
          td Enables disable button
        tr
          td disableButtonEl
          td string<br>HTMLElement
          td
          td CSS selector or HTML element of searchbar disable button. By default (if not passed) will try to look for element with `search-disable-button` class inside of searchbar
        tr
          td searchContainer
          td string<br>HTMLElement
          td
          td CSS selector or HTML element of list block to search in
        tr
          td searchIn
          td string
          td
          td CSS selector of List View element's field where we need to search. Usually we search through element titles, in this case we need to pass `.item-title`. It is also possible to pass few elements for search like `.item-title, .item-text`
        tr
          td searchItem
          td string
          td li
          td CSS selector of single search item. If we do a search in List View, then it must be a single list element `li`
        tr
          td searchGroup
          td string
          td .list-group
          td CSS selector of group element. Used when `hideGroups` enabled to hide groups. If we do a search in List View, then it usually a list group.
        tr
          td searchGroupTitle
          td string
          td .list-group-title, .item-divider
          td CSS selector of group titles and dividers. Used when `hideDividers` enabled to hide group titles and dividers. If we do a search in List View, then it usually a list group title or list item divider.
        tr
          td foundEl
          td string<br>HTMLElement
          td .searchbar-found
          td CSS selector or HTMLElement of searchbar "found" element to make it hidden when there is no search results
        tr
          td notFoundEl
          td string<br>HTMLElement
          td .searchbar-not-found
          td CSS selector or HTMLElement of searchbar "not-found" element to make it visible when there is no search results
        tr
          td hideOnEnableEl
          td string<br>HTMLElement
          td .searchbar-hide-on-enable
          td CSS selector or HTMLElement of elements to be hidden when searchbar enabled
        tr
          td hideOnSearchEl
          td string<br>HTMLElement
          td .searchbar-hide-on-search
          td CSS selector or HTMLElement of elements to be hidden on searchbar search
        tr
          td backdrop
          td boolean
          td
          td Enables searchbar backdrop element. By default, disabled for Aurora theme or for inline searchbar
        tr
          td backdropEl
          td string<br>HTMLElement
          td
          td CSS selector or HTMLElement of searchbar backdrop element. If not passed and `backdrop` parameter is `true` then it will look for `.searchbar-backdrop` element. In case none found it will create one automatically
        tr
          td ignore
          td string
          td .searchbar-ignore
          td CSS selector for items to be ignored by searchbar and always present in search results
        tr
          td customSearch
          td boolean
          td false
          td When enabled searchbar will not search through any of list blocks specified by `searchContainer` and you will be able to use custom search functionality, for example, for calling external APIs with search results and for displaying them manually
        tr
          td removeDiacritics
          td boolean
          td false
          td Enable to remove/replace diacritics (á, í, ó, etc.) during search
        tr
          td hideDividers
          td boolean
          td true
          td If enabled, then search will consider item dividers and group titles and hide them if there are no found items right after them
        tr
          td hideGroups
          td boolean
          td true
          td If enabled, then search will consider list view groups hide them if there are no found items inside of these groups
        tr
          td on
          td object
          td
          td
            p Object with events handlers. For example:
            :code(lang="js")
                  var searchbar = app.searchbar.create({
                    el: '.searchbar',
                    on: {
                      enable: function () {
                        console.log('Searchbar enabled')
                      }
                    }
                  })
    h2 Searchbar Methods & Properties
    p To create a Searchbar we have to call:
    :code(lang="js")
          var searchbar = app.searchbar.create({ /* parameters */ })
    p After we initialize Searchbar we have its initialized instance in variable (like `searchbar` variable in example above) with helpful methods and properties:
    table.methods-table
      tbody
        tr
          th(colspan="2") Properties
        tr
          td searchbar.params
          td Object with passed initialization parameters
        tr
          td searchbar.query
          td Current search query (search input value)
        tr
          td searchbar.previousQuery
          td Previous search query (search input value)
        tr
          td searchbar.searchContainer
          td Searchbar search container
        tr
          td searchbar.$searchContainer
          td Dom7 element with searchbar search container
        tr
          td searchbar.el
          td Searchbar HTML element.
        tr
          td searchbar.$el
          td Dom7 element with searchbar HTML element.
        tr
          td searchbar.inputEl
          td Searchbar input HTML element
        tr
          td searchbar.$inputEl
          td Dom7 element with searchbar input HTML element
        tr
          td searchbar.enabled
          td Boolean value that represents is searchbar enabled or disabled
        tr
          td searchbar.expandable
          td Boolean value that represents is searchbar expandable or not

        tr
          th(colspan="2") Methods
        tr
          td searchbar.search(<span>query</span>);
          td Force searchbar to search passed query
        tr
          td searchbar.enable();
          td Enable/activate searchbar
        tr
          td searchbar.disable();
          td Disable/deactivate searchbar
        tr
          td searchbar.toggle();
          td Toggle searchbar
        tr
          td searchbar.clear();
          td Clear search query and update results
        tr
          td searchbar.destroy();
          td Destroy searchbar instance
        tr
          td searchbar.on(<span>event</span>, <span>handler</span>)
          td Add event handler
        tr
          td searchbar.once(<span>event</span>, <span>handler</span>)
          td Add event handler that will be removed after it was fired
        tr
          td searchbar.off(<span>event</span>, <span>handler</span>)
          td Remove event handler
        tr
          td searchbar.off(<span>event</span>)
          td Remove all handlers for specified event
        tr
          td searchbar.emit(<span>event</span>, <span>...args</span>)
          td Fire event on instance
    h2 Searchbar Events
    p Searchbar will fire the following DOM events on searchbar element and events on app and searchbar instance:
    h3 DOM Events
    table.events-table
      thead
        tr
          th Event
          th Target
          th Description
      tbody
        tr
          td searchbar:search
          td Searchbar Element<span>&lt;form class="searchbar"&gt;</span>
          td Event will be triggered during search (search field change). Event detail (`e.detail`) contains an object with `query` and `previousQuery` properties
        tr
          td searchbar:clear
          td Searchbar Element<span>&lt;form class="searchbar"&gt;</span>
          td Event will be triggered when user clicks on Searchbar's "clear" element (a href="#" class="searchbar-clear"). Event detail (e.detail) contains previous (before clear) search query
        tr
          td searchbar:enable
          td Searchbar Element<span>&lt;form class="searchbar"&gt;</span>
          td Event will be triggered when Searchbar becomes active/enabled
        tr
          td searchbar:disable
          td Searchbar Element<span>&lt;form class="searchbar"&gt;</span>
          td Event will be triggered when Searchbar becomes disabled/inactive - when user clicks on "Cancel" button (a href="searchbar-cancel") or on "searchbar-overlay" element
        tr
          td searchbar:beforedestroy
          td Searchbar Element<span>&lt;form class="searchbar"&gt;</span>
          td Event will be triggered right before Searchbar instance will be destroyed
    h3 App and Searchbar Instance Events
    p Searchbar instance emits events on both self instance and app instance. App instance events has same names prefixed with `searchbar`.
    table.events-table.double-events-table
      thead
        tr
          th Event
          th Target
          th Arguments
          th Description
      tbody
        tr
          td search
          td searchbar
          td(rowspan="2") <span>(searchbar, query, previousQuery)</span>
          td(rowspan="2") Event will be triggered during search (search field change). As an argument event handler receives searchbar instance, current query and previous query
        tr
          td searchbarSearch
          td app

        tr
          td clear
          td searchbar
          td(rowspan="2") <span>(searchbar, previousQuery)</span>
          td(rowspan="2") Event will be triggered when user clicks on Searchbar's "clear" element . As an argument event handler receives searchbar instance and previous (before clear) query
        tr
          td searchbarClear
          td app

        tr
          td enable
          td searchbar
          td(rowspan="2") <span>(searchbar)</span>
          td(rowspan="2") Event will be triggered when Searchbar becomes active/enabled. As an argument event handler receives searchbar instance
        tr
          td searchbarEnable
          td app

        tr
          td disable
          td searchbar
          td(rowspan="2") <span>(searchbar)</span>
          td(rowspan="2") Event will be triggered when Searchbar becomes inactive/disabled. As an argument event handler receives searchbar instance
        tr
          td searchbarDisable
          td app

        tr
          td beforeDestroy
          td searchbar
          td(rowspan="2") <span>(searchbar)</span>
          td(rowspan="2") Event will be triggered right before Searchbar instance will be destroyed
        tr
          td searchbarBeforeDestroy
          td app
    h2 Searchbar Auto Initialization
    p If you don't need to use Searchbar API and your Searchbar is inside of the page and presented in DOM on moment of page initialization then it can be auto initialized with just adding additional `searchbar-init` class to searchbar element, and all required parameters can be passed using `data-` attributes:
    :code(lang="html")
          <div class="page">
            <div class="navbar">...</div>
            <div class="page-content">
              <div class="searchbar-backdrop"></div>

              <!-- Searchbar with "searchbar-init" class for auto initialization and searchContainer, searchIn parameters passed in data- attributes  -->
              <form class="searchbar searchbar-init" data-search-container=".search-here">
                ...
              </form>

              <div class="list simple-list search-list searchbar-found">
                <ul>
                  <li>Hulk</li>
                  <li>Batman</li>
                  <li>Superman</li>
                  ...
                </ul>
              </div>

              ...
            </div>
          </div>
    .important-note
      p Parameters that used in camelCase, for example <b>searchContainer</b>, in data- attributes should be used in kebab-case as <b>data-search-container</b>

    +cssVars('searchbar')

    .with-device
      h2(data-device-preview="../docs-demos/core/searchbar.html") Example
      include:coreSource ../docs-demos/core/searchbar.f7.html
