extends ../_docs-template

block vars
  - var title = 'Treeview | Framework7 Documentation';

block content
  include ../_docs-demo-device

  .docs-nav
    include ../_docs-menu
  .docs-content
    +improveDocsLink
    h1 Treeview
    ul.docs-index
    h2 Treeview Layout
    :code(lang="html")
      <!-- Treeview container -->
      <div class="treeview">
        <!-- Treeview item -->
        <div class="treeview-item">
          <!-- Item root element -->
          <div class="treeview-item-root">
            <!-- Item toggle (to open children on click) -->
            <div class="treeview-toggle"></div>
            <!-- Item content -->
            <div class="treeview-item-content">
              <!-- Item checkbox (optional) -->
              <label class="checkbox">...</label>
              <!-- Item icon (optional) -->
              <i class="icon f7-icons">folder_fill</i>
              <!-- Item label -->
              <div class="treeview-item-label">Item 1</div>
            </div>
          </div>
          <!-- Item children -->
          <div class="treeview-item-children">
            <!-- Children item. It has same recursive layout -->
            <div class="treeview-item">
              <div class="treeview-item-root">
                ...
              </div>
              <div class="treeview-item-children">
                ...
              </div>
            </div>
            <!-- Another children item -->
            <div class="treeview-item">...</div>
          </div>
        </div>
        <!-- Another item -->
        <div class="treeview-item">...</div>
        <!-- Item without children -->
        <div class="treeview-item">
          <div class="treeview-item-root">
            <div class="treeview-item-content">
              <div class="treeview-item-label">Item 3</div>
            </div>
          </div>
        </div>
      </div>
    h3 Treeview Item Link
    p If we need some treeview item to be just a link, we just need to use `<a>` tag for treeview-item-root element:
    :code(lang="html")
      <div class="treeview">
        ...
        <div class="treeview-item">
          <a href="/about/" class="treeview-item-root">
            <div class="treeview-item-content">
              <i class="icon f7-icons">link</i>
              <div class="treeview-item-label">About</div>
            </div>
          </a>
        </div>
        ...
      </div>
    h3 Treeview Item Toggle
    p Instead of toggle (or in addition) button, we can make whole treeview item work like a toggle. In this case we need to add `treeview-item-toggle` to treeview item root element:
    :code(lang="html")
      <div class="treeview">
        ...
        <div class="treeview-item">
        <!-- additional "treeview-item-toggle" class -->
          <div class="treeview-item-root treeview-item-toggle">
            <div class="treeview-toggle"></div>
            <div class="treeview-item-content">
              <i class="icon f7-icons">folder_fill</i>
              <div class="treeview-item-label">images</div>
            </div>
          </div>
          <div class="treeview-item-children">
            ...
          </div>
        </div>
        ...
      </div>
    h3 Treeview Selectable Item
    p We can also make treeview item selectable. In this case we need to add `treeview-item-selectable` to treeview item root element, and `treeview-item-selected` to selected item root element:
    :code(lang="html")
      <div class="treeview">
        ...
        <div class="treeview-item">
          <!-- additional "treeview-item-selectable" class -->
          <div class="treeview-item-root treeview-item-selectable">
            <div class="treeview-toggle"></div>
            <div class="treeview-item-content">
              <i class="icon f7-icons">folder_fill</i>
              <div class="treeview-item-label">images</div>
            </div>
          </div>
          <div class="treeview-item-children">
            ...
          </div>
        </div>
        <div class="treeview-item">
          <!-- additional "treeview-item-selected" class on selected item -->
          <div class="treeview-item-root treeview-item-selectable treeview-item-selected">
            <div class="treeview-toggle"></div>
            <div class="treeview-item-content">
              <i class="icon f7-icons">folder_fill</i>
              <div class="treeview-item-label">documents</div>
            </div>
          </div>
          <div class="treeview-item-children">
            ...
          </div>
        </div>
        ...
      </div>
    h2 Treeview App Methods
    p Let's look at related App methods to work with Treeview:
    .method-wrap
      p
        span.method app.treeview.open(<span>el</span>)
        | - open (expand) Treeview item
      ul.method-parameters
        li
          span.parameter el
          |  - <span class="parameter-type">HTMLElement</span> or <span class="parameter-type">string</span> (with CSS Selector). Treeview item element to open.
    .method-wrap
      p
        span.method app.treeview.close(<span>el</span>)
        | - close (collapse) Treeview item
      ul.method-parameters
        li
          span.parameter el
          |  - <span class="parameter-type">HTMLElement</span> or <span class="parameter-type">string</span> (with CSS Selector). Treeview item element to close.
    .method-wrap
      p
        span.method app.treeview.toggle(<span>el</span>)
        | - toggle (open or close) Treeview item
      ul.method-parameters
        li
          span.parameter el
          |  - <span class="parameter-type">HTMLElement</span> or <span class="parameter-type">string</span> (with CSS Selector). Treeview item element to toggle.

    h2 Treeview Events
    p Sheet will fire the following DOM events on sheet element and events on app and sheet instance:
    h3 DOM Events
    table.events-table
      thead
        tr
          th Event
          th Target
          th Description
      tbody
        tr
          td treeview:open
          td Treeview Item Element<span>&lt;div class="treeview-item"&gt;</span>
          td Event will be triggered on Treeview item open
        tr
          td treeview:close
          td Treeview Item Element<span>&lt;div class="treeview-item"&gt;</span>
          td Event will be triggered on Treeview item close
        tr
          td treeview:loadchildren
          td Treeview Item Element<span>&lt;div class="treeview-item"&gt;</span>
          td
            p Event will be triggered on first open of Treeview item with `treeview-load-children` class. In `event.detail` it contains function to hide loading preloader.
    h3 App Events
    p Treeview also emits events on app instance.
    table.events-table
      thead
        tr
          th Event
          th Target
          th Description
      tbody
        tr
          td treeviewOpen
          td <span>(itemEl)</span>
          td app
          td Event will be triggered on Treeview item open
        tr
          td treeviewClose
          td <span>(itemEl)</span>
          td app
          td Event will be triggered on Treeview item close
        tr
          td treeviewLoadChildren
          td <span>(itemEl, done)</span>
          td app
          td Event will be triggered on first open of Treeview item with `treeview-load-children` class. As second argument it has function to hide loading preloader.

    h2 Load Children
    p It is also possible to load children on treeview item open. To make it work, we, at first, need to add `treeview-load-children` class to such treeview item. And then listen for `treeview:loadchildren` event to proceed with loading. Check the examples below for implementation example.
    ```html
      <div class="treeview">
        <div class="treeview-item treeview-load-children">
          ...
          <div class="treeview-item-children">
            ...
          </div>
        </div>
      </div>
      <script>
        $('.treeview-load-children').on('treeview:loadchildren', (e) => {
          loadChildren: function (e) {
            const done = e.detail;
            fetch('some-url')
              .then(() => {
                // ... update UI and call done
                done();
              })
              .catch((err) => {
                // in case of error, call done(true) to cancel loading effect
                done(true);
              })
          },
        })

        //- or

        app.on('treeviewLoadChildren', (itemEl, done) => {
          loadChildren: function (e) {
            fetch('some-url')
              .then(() => {
                // ... update UI and call done
                done();
              })
              .catch((err) => {
                // in case of error, call done(true) to cancel loading effect
                done(true);
              })
          },
        })
      </script>
    ```

    +cssVars('treeview')

    .with-device
      h2(data-device-preview="../docs-demos/core/treeview.html") Examples
      include:coreSource ../docs-demos/core/treeview.f7.html
