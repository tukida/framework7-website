extends ../_docs-template

block vars
  - var title = 'Action Sheet | Framework7 Documentation';

block content
  include ../_docs-demo-device

  .docs-nav
    include ../_docs-menu
  .docs-content
    +improveDocsLink
    h1 Action Sheet
    ul.docs-index
    p Action Sheet is a slide-up pane for presenting the user with a set of alternatives for how to proceed with a given task.
    p You can also use action sheets to prompt the user to confirm a potentially dangerous action.
    p The action sheet contains an optional title and one or more buttons, each of which corresponds to an action to take.
    .important-note
      p Note that it is not recommended to use Action Sheet on large screens (iPad). On large screens you should use <a href="popover.html">Popover</a> instead.
    h2 Action Sheet App Methods
    p Lets look at related App methods to work with the Action Sheet:
    .method-wrap
      p
        span.method app.actions.create(<span>parameters</span>)
        | - create Action Sheet instance
      ul.method-parameters
        li
          span.parameter parameters
          |  - <span class="parameter-type">object</span>. Object with action sheet parameters
      p.method-returns Method returns created Action Sheet's instance

    .method-wrap
      p
        span.method app.actions.destroy(<span>el</span>)
        | - destroy Action Sheet instance
      ul.method-parameters
        li
          span.parameter el
          |  - <span class="parameter-type">HTMLElement</span> or <span class="parameter-type">string</span> (with CSS Selector) or <span class="parameter-type">object</span>. Action element instance to destroy.
    .method-wrap
      p
        span.method app.actions.get(<span>el</span>)
        | - get Action Sheet instance by HTML element
      ul.method-parameters
        li
          span.parameter el
          |  - <span class="parameter-type">HTMLElement</span> or <span class="parameter-type">string</span> (with CSS Selector). Action Sheet element.
      p.method-returns Method returns Action Sheet's instance
    .method-wrap
      p
        span.method app.actions.open(<span>el</span>, <span>animate</span>)
        | - opens Action Sheet
      ul.method-parameters
        li
          span.parameter el
          |  - <span class="parameter-type">HTMLElement</span> or <span class="parameter-type">string</span> (with CSS Selector). Action Sheet element to open.
        li
          span.parameter animate
          |  - <span class="parameter-type">boolean</span>. Open Actions Sheet with animation.
      p.method-returns Method returns Action Sheet's instance
    .method-wrap
      p
        span.method app.actions.close(<span>el</span>, <span>animate</span>)
        | - closes Action Sheet
      ul.method-parameters
        li
          span.parameter el
          |  - <span class="parameter-type">HTMLElement</span> or <span class="parameter-type">string</span> (with CSS Selector). Action Sheet element to close.
        li
          span.parameter animate
          |  - <span class="parameter-type">boolean</span>. Close Actions Sheet with animation.
      p.method-returns Method returns Action Sheet's instance

    h2 Action Sheet Parameters
    p Now lets look at a list of available parameters we need to create the Action Sheet:
    table.params-table
      thead
        tr
          th Parameter
          th Type
          th Default
          th Description
      tbody
        tr
          td el
          td HTMLElement
          td
          td Action Sheet element. Can be useful if you already have Action Sheet element in your HTML and want to create new instance using this element
        tr
          td content
          td string
          td
          td Full Action Sheet HTML content string. Can be useful if you want to create Action Sheet element with custom HTML
        tr
          td backdrop
          td boolean
          td true
          td Enables Action Sheet backdrop (dark semi transparent layer behind)
        tr
          td backdropEl
          td HTMLElement<br>string
          td
          td HTML element or string CSS selector of custom backdrop element
        tr
          td closeByBackdropClick
          td boolean
          td true
          td When enabled, action sheet will be closed on backdrop click
        tr
          td closeByOutsideClick
          td boolean
          td false
          td When enabled, action sheet will be closed on when click outside of it
        tr
          td closeOnEscape
          td boolean
          td false
          td When enabled, action sheet will be closed on ESC keyboard key press
        tr
          td animate
          td boolean
          td true
          td Whether the Action Sheet should be opened/closed with animation or not. Can be overwritten in `.open()` and `.close()` methods
        tr
          td buttons
          td array
          td
          td Action sheet groups/buttons. In this case Actions layout will be generated dynamically based on passed groups and buttons. In case of <b>groups</b> it should array where each item represent array with buttons for group.
        tr
          td grid
          td boolean
          td false
          td Enables grid buttons layout
        tr
          td convertToPopover
          td boolean
          td true
          td When enabled, action sheet will be converted to <a href="popover.html">Popover</a> on large screens or on desktop device with Aurora theme.
        tr
          td forceToPopover
          td boolean
          td false
          td When enabled, action sheet will be always converted to <a href="popover.html">Popover</a>.
        tr
          td targetEl
          td HTMLElement<br>string
          td
          td HTML element or string CSS selector of target element. Required when conversion to popover is in use
        tr
          td targetX
          td number
          td
          td Virtual target element horizontal offset from left side of the screen. Required when conversion to popover is in use without using real target element (`targetEl`)
        tr
          td targetY
          td number
          td
          td Virtual target element vertical offset from top of the screen. Required when conversion to popover is in use without using real target element (`targetEl`)
        tr
          td targetWidth
          td number
          td 0
          td Virtual target element width (in px). Required when conversion to popover is in use without using real target element (`targetEl`)
        tr
          td targetHeight
          td number
          td 0
          td Virtual target element height (in px). Required when conversion to popover is in use without using real target element (`targetEl`)
        tr
          td cssClass
          td string
          td
          td Additional CSS class name to be set on action sheet element
        tr
          td onClick
          td function(actions, e)
          td
          td Callback function that will be executed after click on the Action Sheet button
        tr
          td render
          td function
          td
          td Custom function to render Action Sheet. Must return Action Sheet html
        tr
          td renderPopover
          td function
          td
          td Custom function to render Popover when conversion to popover is in use. Must return Popover html
        tr
          td on
          td object
          td
          td
            p Object with events handlers. For example:
            :code(lang="js")
              var actions = app.actions.create({
                buttons: [ /* ... */ ],
                on: {
                  opened: function () {
                    console.log('Action Sheet opened')
                  }
                }
              })
    .important-note
      p Note that all of the following parameters can be used in the global app parameters under the `actions` property to set defaults for all action sheets. For example:
      :code(lang="js")
        var app = new Framework7({
          actions: {
            convertToPopover: false,
            grid: true,
          }
        });
    h3 Button Parameters
    p Each Button in `buttons` array must be presented as an object with button parameters:
    table.params-table
      thead
        tr
          th Parameter
          th Type
          th Default
          th Description
      tbody
        tr
          td text
          td string
          td
          td String with Button's text (could be HTML string)
        tr
          td icon
          td string
          td
          td HTML string of icon
        tr
          td bold
          td boolean
          td false
          td Enables bold button text
        tr
          td color
          td string
          td
          td Button color, one of default colors
        tr
          td bg
          td string
          td
          td Button background color, one of default colors
        tr
          td label
          td boolean
          td false
          td If enabled then it will be rendered as label instead of button
        tr
          td disabled
          td boolean
          td false
          td Defines whether the button is disabled or not.
        tr
          td close
          td boolean
          td true
          td If enabled then button click will close Action Sheet
        tr
          td onClick
          td function(actions, e)
          td
          td Callback function that will be executed after click on this button
    h2 Action Sheet Methods & Properties
    p So to create an Action Sheet we have to call:
    :code(lang="js")
      var actions = app.actions.create({ /* parameters */ })
    p After that we have its initialized instance (like `actions` variable in example above) with useful methods and properties:
    table.methods-table
      tbody
        tr
          th(colspan="2") Properties
        tr
          td actions.app
          td Link to global app instance
        tr
          td actions.el
          td Action sheet HTML element
        tr
          td actions.$el
          td Dom7 instance with action sheet HTML element
        tr
          td actions.backdropEl
          td Backdrop HTML element
        tr
          td actions.$backdropEl
          td Dom7 instance with backdrop HTML element
        tr
          td actions.params
          td Action sheet instance parameters
        tr
          td actions.opened
          td Boolean prop indicating whether action sheet is opened or not
        tr
          th(colspan="2") Methods
        tr
          td actions.open(<span>animate</span>)
          td Open action sheet. Where
            ul.method-parameters
              li
                span.parameter animate
                |  - <span class="parameter-type">boolean</span> (by default `true`) - defines whether it should be opened with animation
        tr
          td actions.close(<span>animate</span>)
          td Close action sheet. Where
            ul.method-parameters
              li
                span.parameter animate
                |  - <span class="parameter-type">boolean</span> (by default `true`) - defines whether it should be closed with animation
        tr
          td actions.destroy()
          td Destroy action sheet
        tr
          td actions.on(<span>event</span>, <span>handler</span>)
          td Add event handler
        tr
          td actions.once(<span>event</span>, <span>handler</span>)
          td Add event handler that will be removed after it was fired
        tr
          td actions.off(<span>event</span>, <span>handler</span>)
          td Remove event handler
        tr
          td actions.off(<span>event</span>)
          td Remove all handlers for specified event
        tr
          td actions.emit(<span>event</span>, <span>...args</span>)
          td Fire event on instance
    h2 Control Action Sheet With Links
    p It is possible to open and close required action sheets (if you have them in DOM) using special classes and data attributes on links:
    .important-note
      ul
        li
          p To open action sheet we need to add "<b>actions-open</b>" class to any HTML element (prefered to link)
        li
          p To close action sheet we need to add "<b>actions-close</b>" class to any HTML element (prefered to link)
        li
          p If you have more than one action sheet in DOM, you need to specify appropriate action sheet via additional <b>data-actions=".my-actions"</b> attribute on this HTML element
    p According to above note:
    :code(lang="html")
      <!-- In data-actions attribute we specify CSS selector of action sheet we need to open -->
      <p><a href="#" data-actions=".my-actions" class="actions-open">Open Actions</a></p>

      <!-- And somewhere in DOM -->
      <div class="actions-modal my-actions">
        ...
      </div>
    h2 Action Sheet Events
    p Action sheet will fire the following DOM events on action sheet element and events on app and action sheet instance:
    h3 DOM Events
    table.events-table
      thead
        tr
          th Event
          th Target
          th Description
      tbody
        tr
          td actions:open
          td Action Sheet Element<span>&lt;div class="actions-modal"&gt;</span>
          td Event will be triggered when Action Sheet starts its opening animation
        tr
          td actions:opened
          td Action Sheet Element<span>&lt;div class="actions-modal"&gt;</span>
          td Event will be triggered after Action Sheet completes its opening animation
        tr
          td actions:close
          td Action Sheet Element<span>&lt;div class="actions-modal"&gt;</span>
          td Event will be triggered when Action Sheet starts its closing animation
        tr
          td actions:closed
          td Action Sheet Element<span>&lt;div class="actions-modal"&gt;</span>
          td Event will be triggered after Action Sheet completes its closing animation
    h3 App and Action Sheet Instance Events
    p Action Sheet instance emits events on both self instance and app instance. App instance events has same names prefixed with `actions`.
    table.events-table.double-events-table
      thead
        tr
          th Event
          th Arguments
          th Target
          th Description
      tbody
        tr
          td open
          td <span>actions</span>
          td actions
          td(rowspan="2") Event will be triggered when Action Sheet starts its opening animation. As an argument event handler receives action sheet instance
        tr
          td actionsOpen
          td <span>actions</span>
          td app
        tr
          td opened
          td <span>actions</span>
          td actions
          td(rowspan="2") Event will be triggered after Action Sheet completes its opening animation. As an argument event handler receives action sheet instance
        tr
          td actionsOpened
          td <span>actions</span>
          td app
        tr
          td close
          td <span>actions</span>
          td actions
          td(rowspan="2") Event will be triggered when Action Sheet starts its closing animation. As an argument event handler receives action sheet instance
        tr
          td actionsClose
          td <span>actions</span>
          td app
        tr
          td closed
          td <span>actions</span>
          td actions
          td(rowspan="2") Event will be triggered after Action Sheet completes its closing animation. As an argument event handler receives action sheet instance
        tr
          td actionsClosed
          td <span>actions</span>
          td app
        tr
          td beforeDestroy
          td <span>actions</span>
          td actions
          td(rowspan="2") Event will be triggered right before Action Sheet instance will be destroyed. As an argument event handler receives action sheet instance
        tr
          td actionsBeforeDestroy
          td <span>actions</span>
          td app

    +cssVars('actions')

    h2(data-device-preview="../docs-demos/core/action-sheet.html") Examples
    .with-device
      include:coreSource ../docs-demos/core/action-sheet.f7.html

